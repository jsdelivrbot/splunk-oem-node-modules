/*  Button backgrounds
/*  ------------------ */

$selectedShadow: inset 1px 2px 2px rgba(0, 0, 0, 0.125);

@define-mixin focus {
    border-color: color($focusColor a(80%));
    outline: 0;
    box-shadow: $focusShadow;
    z-index: 1;
}

.button {
    @mixin reset block;

    width: 100%;
    border-radius: $baseBorderRadius;
    text-align: center;
    vertical-align: middle;
    cursor: pointer;
    text-decoration: none;
    border: 1px solid transparent;
    white-space: nowrap;
    flex-grow: 1;
    flex-shrink: 0;
    min-width: 0;
    max-width: 100%;

    padding: 4px 12px;
    min-height: $inputHeight;

    &[data-size=small] {
        padding: 0 8px;
        font-size: $fontSizeSmall;
        min-height: $inputHeightSmall;
    }

    &[data-size=large] {
        padding: 11px 19px;
        font-size: $fontSizeLarge;
        min-height: $inputHeightLarge;
    }

    @media all and (-ms-high-contrast: none) {
        max-width: calc(100% - 0.01px); /* fixes IE11 flex bug */
    }

    &[data-inline] {
        display: inline-block;
        /* stylelint-disable declaration-block-no-ignored-properties */
        width: auto; /* required to work with flex-basis: auto */
        /* stylelint-enable */

        vertical-align: middle;

        [data-inline] + & {
            margin-left: 10px;
            margin-bottom: 0;
        }
    }

    &[data-append] {
        border-top-right-radius: 0;
        border-bottom-right-radius: 0;
        border-right-color: transparent;
    }

    &[data-prepend] {
        border-top-left-radius: 0;
        border-bottom-left-radius: 0;
    }

    .contentWrapper {
        display: flex;
        flex-direction: row;
        justify-content: center;
        align-items: center;
        max-width: 100%;
    }

    /* Contents */
    .label {
        text-overflow: ellipsis;
        overflow: hidden;
        flex: 0 1 auto;

        &:not(:first-child) {
            padding-left: 3px;
        }

        &:not(:last-child) {
            padding-right: 3px;
        }
    }

    &[data-is-menu] .label {
        flex: 1 1 auto;
        text-align: left;
    }
}

.default {
    composes: button;

    &:not([disabled]):not([aria-invalid]) {
        @mixin interactive;

        &:hover {
            @mixin interactive-hover;

            &[data-selected] {
                box-shadow: $selectedShadow;
            }
        }

        &[data-append] {
            border-right-color: transparent;
        }

        &[data-selected] {
            box-shadow: $selectedShadow;
            border-right-color: color($borderInteractiveColor a(0.5));

            @if $theme == lite {
                border-right-color: color($borderInteractiveColor a(0.2));
                background-color: $gray96;
            }
        }

        &:focus {
            @mixin focus;

            &[data-selected] {
                box-shadow: $selectedShadow, $focusShadow;
            }
        }
    }

    &[disabled] {
        color: $textDisabledColor;
        background-color: $gray96;
        border-color: $borderLightColor;
        cursor: not-allowed;

        &[data-selected] {
            box-shadow: $selectedShadow;
        }
    }

}

.primary {
    composes: button;

    &:not([disabled]):not([aria-invalid]) {
        @mixin interactive-primary;

        &[data-selected] {
            box-shadow: $selectedShadow;
        }

        &:hover {
            @mixin interactive-primary-hover;

            &[data-selected] {
                box-shadow: $selectedShadow;
            }
        }

        &[data-append] {
            border-right-color: transparent;
        }

        &:focus {
            @mixin focus;

            &.selected {
                box-shadow: $selectedShadow, $focusShadow;
            }
        }
    }

    &[disabled] {
        color: $textDisabledColor;
        background-color: $gray96;
        border-color: $borderLightColor;
        cursor: not-allowed;
    }

    &[data-selected] {
        box-shadow: $selectedShadow;
    }
}

.default,
.primary {
    &[aria-invalid]:not([disabled]) {
        @mixin interactive-error;

        &[data-selected] {
            box-shadow: $selectedShadow;
        }

        &:hover {
            @mixin interactive-error-hover;
        }

        &:focus {
            @mixin focus;

            &[data-selected] {
                box-shadow: $selectedShadow, $focusShadow;
            }
        }
    }
}

.pill {
    composes: button;
    color: $linkColor;

    &:not([disabled]) {
        &:hover {
            background-color: $backgroundColorHover;
            color: $linkColorHover;
        }

        &:focus {
            outline: 0;
            background: $backgroundColorFocusTransparent;
        }
    }

    &[aria-invalid]:not([disabled]) {
        &,
        &:hover {
            color: $errorColor;
        }
    }

    &[disabled] {
        color: $textDisabledColor;
        cursor: not-allowed;
    }

    &[data-selected] {
        background-color: $backgroundColorHover;
        color: $textColor;
    }
}

.newTab {
    padding-left: 3px;
    display: inline-block;
    text-decoration: none;
}
