import React, { Children, cloneElement, PropTypes } from 'react';
import { extend } from 'lodash';
import css from './Table.css';

const propTypes = {
    tHead: PropTypes.element.isRequired, // TODO validate type is Table.Head?
    width: PropTypes.number.isRequired,
    tableWidth: PropTypes.number.isRequired,
    cellWidths: PropTypes.arrayOf(PropTypes.number).isRequired,
    top: PropTypes.number.isRequired,
    horizontalOffset: PropTypes.number,
    headType: PropTypes.oneOf(['docked', 'fixed']).isRequired,
    tableStyle: PropTypes.object,
};

const defaultProps = {
    horizontalOffset: 0,
};

/**
 * @private
 * HeadTable is an internal component that provides a detached table head that can
 * then be positioned in different ways outside of the main table.
 */
function HeadTable(props) {
    const {
        tHead,
        width,
        tableWidth,
        cellWidths,
        top,
        horizontalOffset,
        headType,
        tableStyle,
    } = props;

    const isDocked = headType === 'docked';
    // Set the widths of the head cells
    const cells = Children.map(tHead.props.children, (cell, i) => cloneElement(cell, {
        style: extend({}, cell.props.style, {
            width: cellWidths[i],
        }),
    }));

    const clonedTHead = cloneElement(tHead, {
        children: cells,
    });
    return (
        <div
            className={isDocked ? css.dockedHeadContainer : css.fixedHeadContainer}
            style={{ top, width }}
        >
            <table
                className={isDocked ? css.dockedHeadTable : css.fixedHeadTable}
                style={extend({}, tableStyle, {
                    marginLeft: horizontalOffset,
                    width: tableWidth,
                })}
            >
                {clonedTHead}
            </table>
        </div>
    );
}

HeadTable.propTypes = propTypes;
HeadTable.defaultProps = defaultProps;
export default HeadTable;
