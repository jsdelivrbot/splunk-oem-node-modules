import React, { Component } from 'react';
import Table from 'splunk-ui/components/Table';

const data = [
    { name: 'Rylan', email: 'Angelita_Weimann42@gmail.com' },
    { name: 'Amelia', email: 'Dexter.Trantow57@hotmail.com' },
    { name: 'Estevan', email: 'Aimee7@hotmail.com' },
    { name: 'Florence', email: 'Jarrod.Bernier13@yahoo.com' },
    { name: 'Tressa', email: 'Yadira1@hotmail.com' },
];

const columns = [
    { sortKey: 'name', label: 'Name' },
    { sortKey: 'email', label: 'Email' },
];

class SortableColumns extends Component {
    constructor(...args) {
        super(...args);
        this.state = {
            sortKey: 'name',
            sortDir: 'asc',
        };
    }

    handleSort = (e, { sortKey }) => {
        const prevSortKey = this.state.sortKey;
        const prevSortDir = prevSortKey === sortKey ? this.state.sortDir : 'none';
        const nextSortDir = prevSortDir === 'asc' ? 'desc' : 'asc';
        this.setState({
            sortKey,
            sortDir: nextSortDir,
        });
    }

    render() {
        const { sortKey, sortDir } = this.state;
        return (
            <Table stripeRows>
                <Table.Head>
                    {columns.map(headData => (
                        <Table.HeadCell
                            key={headData.sortKey}
                            onSort={this.handleSort}
                            sortKey={headData.sortKey}
                            sortDir={headData.sortKey === sortKey ? sortDir : 'none'}
                        >
                            {headData.label}
                        </Table.HeadCell>
                    ))}
                </Table.Head>
                <Table.Body>
                    {data.sort((rowA, rowB) => {
                        if (sortDir === 'asc') {
                            return rowA[sortKey] > rowB[sortKey] ? 1 : -1;
                        } else if (sortDir === 'desc') {
                            return rowB[sortKey] > rowA[sortKey] ? 1 : -1;
                        }
                        return 0;
                    }).map(row => (
                        <Table.Row key={row.email}>
                            <Table.Cell>{row.name}</Table.Cell>
                            <Table.Cell>{row.email}</Table.Cell>
                        </Table.Row>
                    ))}
                </Table.Body>
            </Table>
        );
    }
}

export default SortableColumns;
