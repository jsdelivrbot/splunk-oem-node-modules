import React, { Component, PropTypes } from 'react';
import { keycode } from 'splunk-ui/util/keyboard';
import { omit } from 'lodash';
import toClassName from 'splunk-ui/util/toClassName';
import Sort from 'splunk-ui/icons/Sort';
import SortedDown from 'splunk-ui/icons/SortedDown';
import SortedUp from 'splunk-ui/icons/SortedUp';
import css from './HeadCell.css';


class HeadCell extends Component {
    static splunkUiType = 'Table.HeadCell';

    static propTypes = {
        /** @docs-ignore. */
        children: PropTypes.node,
        /** @docs-ignore. */
        className: PropTypes.string,
        /**
         * A callback invoked when this head cell is clicked. If provided, this HeadCell will be
         * sortable and render the appropriate user interface.
         */
        onSort: PropTypes.func,
        /**
         * @docs-ignore. This will be passed through, and will work as expected.
         */
        onKeyDown: PropTypes.func,
        /**
         * The current sort direction of this column.
         */
        sortDir: PropTypes.oneOf(['asc', 'desc', 'none']),
        /**
         * The `sortKey` will be passed in the data object to the `onSort` callback, if provided.
         */
        sortKey: PropTypes.string,
    };

    static defaultProps = {
        onKeyDown: function noop() {},
        sortDir: 'none',
    };

    handleClick = (e) => {
        const { sortKey, sortDir } = this.props;
        this.props.onSort(e, { sortKey, sortDir });
    }

    handleKeyDown = (e) => {
        if (keycode(e) === 'enter') {
            this.handleClick(e);
        }
        this.props.onKeyDown(e);
    }

    render() {
        const { children, className, onSort, sortDir } = this.props;
        return (
            <th
                className={toClassName(onSort ? css.sortable : css.main, className)}
                onClick={onSort && this.handleClick}
                tabIndex={onSort && 0}
                onKeyDown={onSort && this.handleKeyDown}
                {...omit(this.props, Object.keys(HeadCell.propTypes))}
            >
                {children}
                {onSort && (
                    <span className={css.sortIcon}>
                        {sortDir === 'none' && <Sort />}
                        {sortDir === 'asc' && <SortedUp />}
                        {sortDir === 'desc' && <SortedDown />}
                    </span>
                )}
            </th>
        );
    }
}

export default HeadCell;
