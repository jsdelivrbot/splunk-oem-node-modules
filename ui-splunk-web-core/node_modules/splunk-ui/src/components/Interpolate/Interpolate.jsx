import React, { cloneElement, PropTypes } from 'react';
import { invariant } from 'splunk-ui/util/errorHandling';

const splitRegEx = /(\$+?)(\w+?)(\$)/;

const propTypes = {
    /**
     * The target string for values to be interplated into. Use the syntax `$key$` to denote tokens
     * to be replaced by a value from the values prop. Use a second '$' to prevent a value escape.
     * Keys may contain letters, numbers, or underscore.
     */
    children: PropTypes.string.isRequired,
    /**
     * A map of keys to renderable values to be interpolated into the passed string.
     */
    values: PropTypes.objectOf(PropTypes.node).isRequired,
    /**
     * A component or tag to be used for the container.
     */
    Tag: PropTypes.any,
};

const defaultProps = {
    Tag: 'span',
};

/**
 * THIS IS A PRELIMINARY IMPLEMENTATION AND WILL CHANGE AS WE DECIDE UPON A SYNTAX
 * Interpolate swaps tokens for values from the values prop. This is useful in conjunction with
 * `gettext` (or `_`) from the `splunk-ui/util/i18n` module. Translate strings with gettext then use
 * Interpolate to inject values after translation.
 */
export default function Interpolate(props) {
    const { children, Tag, values, ...other } = props;
    const elements = [];
    const tokens = children.split(splitRegEx);
    let i = 0;
    while (i < tokens.length) {
        const string = tokens[i];
        const prefix = tokens[i + 1];
        const token = tokens[i + 2];
        const suffix = tokens[i + 3];
        if (string) {
            elements.push(string);
        }
        if (token) {
            if (prefix.length === 1) {
                const val = values[token];
                if (__DEV__ && val === undefined) {
                    invariant(`Invalid token passed to Interpolate: Expected ${token} to be
                        defined`);
                }
                if (typeof val === 'string') {
                    elements.push(val);
                } else {
                    elements.push(cloneElement(val, {
                        key: val.key || i,
                    }));
                }
            } else {
                // Token has been escaped, put it back together and add it as a string
                const val = prefix.slice(1) + token + suffix;
                elements.push(val);
            }
        } else {
            break;
        }
        i += 4;
    }

    return (
        <Tag {...other}>
            {elements}
        </Tag>
    );
}

Interpolate.propTypes = propTypes;
Interpolate.defaultProps = defaultProps;
