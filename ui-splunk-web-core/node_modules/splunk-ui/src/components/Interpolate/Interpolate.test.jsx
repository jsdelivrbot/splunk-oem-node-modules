/* eslint-env mocha */

import React from 'react';
import { assert } from 'chai';
import { mount } from 'enzyme';
import Link from 'splunk-ui/components/Link';
import Paragraph from 'splunk-ui/components/Paragraph';
import Interpolate from './Interpolate';

describe('Interpolate', () => {
    it('interpolates simple string values', () => {
        const values = {
            a: 'alpha',
            b: 'beta',
        };
        const wrapper = mount(
            <Interpolate values={values}>
                {'The first is $a$ and the second $b$'}
            </Interpolate>
        );
        assert.equal(wrapper.text(), 'The first is alpha and the second beta');
    });

    it('interpolates components', () => {
        const values = {
            link: <Link to="http://duckduckgo.com">Duck!</Link>,
        };
        const wrapper = mount(
            <Interpolate values={values}>
                {'A $link$ in a string'}
            </Interpolate>
        );
        assert.equal(wrapper.text(), 'A Duck! in a string');
    });

    it('supports arbitrary Tag types', () => {
        const wrapper = mount(
            <Interpolate Tag={Paragraph} values={{}}>
                Content
            </Interpolate>
        );
        assert.lengthOf(wrapper.find(Paragraph), 1, 'Paragraph is found');
    });

    it('supports escape syntax of $$', () => {
        const wrapper = mount(
            <Interpolate values={{ token: 'bad' }}>
                {'This $$token$ is escaped'}
            </Interpolate>
        );
        assert.equal(wrapper.text(), 'This $token$ is escaped');
    });

    it('does not interpret a single $ as a token (must have closing $ also)', () => {
        const wrapper = mount(
            <Interpolate values={{ x: 'bad' }}>
                {'$x is not a token'}
            </Interpolate>
        );
        assert.equal(wrapper.text(), '$x is not a token');
    });

    it('throws an error if a value for a token is not provided', () => {
        assert.throws(() => mount(
            <Interpolate values={{}}>
                {'$x$ is not defined.'}
            </Interpolate>
        ));
    });

    it('supported syntax', () => {
        const values = {
            a: 'alpha',
            b: 'beta',
        };
        const testCases = [
            {
                input: '$$a$ and $b$with xyz',
                expectedOutput: '$a$ and betawith xyz',
            },
            {
                input: '$a$$b$',
                expectedOutput: 'alphabeta',
            },
            {
                input: '$a$$$b$',
                expectedOutput: 'alpha$b$',
            },
            {
                input: '$a is not a token',
                expectedOutput: '$a is not a token',
            },
            {
                input: '$a $b are not tokens',
                expectedOutput: '$a $b are not tokens',
            },
            {
                input: '$a$ \\\\$',
                expectedOutput: 'alpha \\\\$',
            },
            {
                input: '$$a$$',
                expectedOutput: '$a$$',
            },
        ];

        testCases.forEach(testCase => {
            const wrapper = mount(
                <Interpolate values={values}>{testCase.input}</Interpolate>
            );
            assert.equal(wrapper.text(), testCase.expectedOutput);
        });
    });
});
