import React, { Component } from 'react';
import filter from 'splunk-ui/util/filter';
import { _ } from 'splunk-ui/util/i18n';
import ComboBox from 'splunk-ui/components/ComboBox';
import { movies } from 'fixtures/movies.json';


class Example extends Component {
    constructor(props, ...rest) {
        super(props, ...rest);

        this.state = {
            value: '',
            isLoading: false,
        };
    }


    handleChange = (e, { value }) => {
        this.setState({ value, isLoading: true });

        clearTimeout(this.timer);
        this.timer = setTimeout(this.fakeFinishFetch, 700);
    }

    fakeFinishFetch = () => {
        this.setState({ isLoading: false });
    }

    generateOptions = () => {
        if (this.state.isLoading) {
            return null;
        }

        // simulate server-side filtering
        const filteredMovies = filter.filterByKeywords(
                movies,
                this.state.value,
                (movie) => movie.title
            );

        const list = filteredMovies.map((movie) => (
            <ComboBox.Option
                label={movie.title}
                value={movie.title}
                key={movie.id}
            />
        ));
        this.fullCount = list.length;

        // truncate list to simulate a load limit
        const listTruncated = list.slice(0, 20);
        this.count = listTruncated.length;

        return listTruncated;
    }

    footerMessage = () => {
        if (this.fullCount > this.count && !this.state.isLoading) {
            return _('%1 of %2 movies').replace('%1', this.count).replace('%2', this.fullCount);
        }
        return null;
    }

    render() {
        const options = this.generateOptions();
        const footerMessage = this.footerMessage();

        return (
            <ComboBox
                value={this.state.value}
                controlledFilter
                inline
                placeholder={_('Select a movie...')}
                menuStyle={{ width: 300 }}
                onChange={this.handleChange}
                onFilterChange={this.handleFilterChange}
                isLoadingOptions={this.state.isLoading}
                footerMessage={footerMessage}
            >
                {options}
            </ComboBox>
        );
    }
}

export default Example;
