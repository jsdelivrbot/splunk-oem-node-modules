import React, { Component, PropTypes } from 'react';
import EventListener from 'react-event-listener';
import { Motion, spring } from 'react-motion';
import { keycode } from 'splunk-ui/util/keyboard';
import { defer, keys, noop, omit } from 'lodash';

import { handleTab, takeFocus } from 'splunk-ui/util/focus';
import RenderToLayer from 'splunk-ui/components/RenderToLayer';
import { createTestHook } from 'splunk-ui/util/testSupport';
import toClassName from 'splunk-ui/util/toClassName';

import Body from './Body';
import Footer from './Footer';
import Header from './Header';
import css from './Modal.css';

class Modal extends Component {
    static propTypes = {
        /**
        * Any renderable children can be passed to the modal.
        *
        * To take advantage of the default Splunk modal styles, use the
        * Modal.Header, Modal.Body, and Modal.Footer.
        */
        children: PropTypes.node,
        /** @docs-ignore */
        className: PropTypes.string,
        /**
         * A function that will be called when a close event occurs. The callback will be passed a
         * reason (either 'escapeKey' or 'clickAway') and the event.
         *
         * Generally, this callback should be used to togle the `open` prop.
         */
        onRequestClose: PropTypes.func,
        /**
         * True if this modal is currently open, otherwise false.
         */
        open: PropTypes.bool,
        /** @docs-ignore */
        style: PropTypes.object,
    };

    static defaultProps = {
        onRequestClose: noop,
        open: false,
        style: {},
    };

    static Header = Header;

    static Body = Body;

    static Footer = Footer;

    constructor(...args) {
        super(...args);
        this.state = {
            animating: false,
        };
    }

    componentWillReceiveProps(nextProps) {
        if (this.props.open !== nextProps.open) {
            this.setState({
                animating: true,
            });
        }
    }

    handleModalMount = (element) => {
        this.el = element;
        if (element) {
            defer(takeFocus, element, 'container');
        }
    }

    handleClickAway = (event) => {
        this.props.onRequestClose({ reason: 'clickAway', event });
    }

    handleModalKeyDown = (e) => {
        handleTab(this.el, e);
    }

    handleWindowKeyDown = (event) => {
        if (keycode(event) === 'esc') {
            this.props.onRequestClose({ reason: 'escapeKey', event });
        }
    }

    handleAnimationEnd = () => {
        this.setState({
            animating: false,
        });
    }

    renderModal = () => {
        const {
            children,
            className,
            style,
        } = this.props;

        const open = this.props.open || this.state.animating;
        const motionStyle = this.props.open ? {
            top: spring(40, { precision: 1 }),
            opacity: spring(1, { precision: 1 }),
            overlayOpacity: spring(0.4, { precision: 1 }),
        } : {
            top: spring(0, { precision: 1 }),
            opacity: spring(0, { precision: 1 }),
            overlayOpacity: spring(0, { precision: 1 }),
        };

        return (
            <Motion style={motionStyle} onRest={this.handleAnimationEnd}>
                {({ top, opacity, overlayOpacity }) => (
                    <div>
                        {open && (
                            <EventListener
                                target="window"
                                onKeyDown={this.handleWindowKeyDown}
                            />
                        )}
                        {open && (
                            <div
                                ref={this.handleModalMount}
                                className={toClassName(css.modal, className)}
                                style={{ ...style, top, opacity }}
                                tabIndex={-1}
                                onKeyDown={this.handleModalKeyDown}
                                role="dialog"
                                {...createTestHook(__filename)}
                                {...omit(this.props, keys(Modal.propTypes))}
                            >
                                {children}
                            </div>

                        )}
                        {open && (
                            <div
                                className={css.overlay}
                                onClick={this.handleClickAway}
                                style={{ opacity: overlayOpacity }}
                            />
                        )}
                    </div>
                )}
            </Motion>
        );
    }

    render() {
        return (
            <RenderToLayer
                render={this.renderModal}
                open
                useLayerForClickAway={false}
            />
        );
    }
}

export default Modal;
