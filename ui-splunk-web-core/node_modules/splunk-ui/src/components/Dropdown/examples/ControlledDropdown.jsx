import React, { Component } from 'react';
import Button from 'splunk-ui/components/Button';
import Dropdown from 'splunk-ui/components/Dropdown';
import P from 'splunk-ui/components/Paragraph';

class ControlledDropdown extends Component {
    constructor(...args) {
        super(...args);
        this.state = {
            open: false,
            reason: 'No close requests yet',
        };
    }

    handleRequestClose = ({ reason }) => {
        this.setState({
            reason,
            open: !(reason === 'toggleClick' || reason === 'offScreen'),
        });
    }

    handleRequestOpen = () => {
        this.setState({
            open: true,
        });
    }

    render() {
        const { open, reason } = this.state;
        const toggle = <Button label="Lorem ipsum" isMenu />;
        return (
            <div>
                <P>
                    By default, the Dropdown component handles its own state. But, if you
                    need more control over when the Dropdown opens and closes, it can also be used
                    as a [controlled component]
                    (https://facebook.github.io/react/docs/forms.html#controlled-components).
                    In this case, the parent component must manage the open/close state of the
                    Dropdown.
                    See the `onRequestClose` and `onRequestOpen` callbacks for available hooks to
                    help manage this state. Note that there is no mixing of responsibilities. Either
                    the Dropdown component handles the open/close state or its parent does.
                    Never both/either.
                </P>
                <P>
                    This simple example manages the Dropdown open/close state by closing on
                    `toggleClick` or `offScreen`. Other close actions are recieved but ignored.
                </P>
                <P>
                    The last call to onRequestClose provided the reason: {reason}
                </P>
                <Dropdown
                    open={open}
                    onRequestClose={this.handleRequestClose}
                    onRequestOpen={this.handleRequestOpen}
                    toggle={toggle}
                >
                    <div style={{ padding: '20px', maxWidth: '300px' }}>
                        Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod
                        tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,
                        quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo
                        consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse
                        cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat
                        non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.
                    </div>
                </Dropdown>
            </div>
        );
    }
}

export default ControlledDropdown;
