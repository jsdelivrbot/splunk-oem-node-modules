/* eslint-disable no-use-before-define */
import React, { PropTypes } from 'react';
import { clone, isUndefined } from 'lodash';
import guid from 'splunk-ui/util/guid';
import { createTestHook } from 'splunk-ui/util/testSupport';
import toClassName from 'splunk-ui/util/toClassName';
import Box from 'splunk-ui/components/Box';
import Tooltip from 'splunk-ui/components/Tooltip';
import Help from './Help';
import css from './ControlGroup.css';

const propTypes = {
    /** @docs-ignore */
    children: PropTypes.node,
    /** @docs-ignore */
    className: PropTypes.string,
    controlsLayout: PropTypes.oneOf(['fill', 'fillJoin', 'none', 'stack']),
    /**
    * Highlight the control group as having an error. The label and help text will turn red,
    * but the children are not affected.
    */
    error: PropTypes.bool,
    help: PropTypes.node,
    label: PropTypes.string.isRequired,
    labelPosition: PropTypes.oneOf(['left', 'top']),
    /** The size of the text label. */
    size: PropTypes.oneOf(['small', 'medium']),
    tooltip: PropTypes.node,
};

const defaultProps = {
    controlsLayout: 'fill',
    error: false,
    label: 'Label',
    labelPosition: 'left',
    size: 'medium',
};


export default function ControlGroup(props) {
    const {
        children,
        className,
        controlsLayout,
        error,
        help,
        labelPosition,
        label,
        size,
        tooltip,
        ...otherProps
    } = props;

    const controlId = guid();
    const labelId = `${controlId}-label`;
    const helpId = `${controlId}-help`;

    // Converts control layout type to class name: e.g. stack -> controlsStack
    const layoutType = `${controlsLayout.charAt(0).toUpperCase()}${controlsLayout.slice(1)}`;
    const controlsClassName = `controls${layoutType}`;

    // Clean the Children
    function cloneWithProps(item, i) {
        if (!React.isValidElement(item)) {
            return item;
        }

        const count = React.Children.count(children);
        const cloneProps = {
            key: (item.key || i),
        };

        function shouldApplyProp(propName) {
            // Must support prop
            if (!item.type || !item.type.propTypes || !item.type.propTypes[propName]) {
                return false;
            }

            //  Must not have been change from the default.
            if (!item.type.defaultProps || !item.props || isUndefined(item.props[propName])) {
                return true;
            }

            return (item.props[propName] === item.type.defaultProps[propName]);
        }

        if (controlsLayout === 'fillJoin' && shouldApplyProp('prepend') && i > 0) {
            cloneProps.prepend = true;
        }

        if (controlsLayout === 'fillJoin' && shouldApplyProp('append') && i < (count - 1)) {
            cloneProps.append = true;
        }

        if (controlsLayout === 'fill' && shouldApplyProp('inline') && count > 1) {
            cloneProps.inline = true;
        }

        if (shouldApplyProp('labelledBy')) {
            cloneProps.labelledBy = labelId;
        }

        if (shouldApplyProp('describedBy') && props.help) {
            cloneProps.describedBy = helpId;
        }

        if (count === 1 && (controlsLayout === 'fillJoin' || controlsLayout === 'fill')) {
            cloneProps.style = item.props.style ? clone(item.props.style) : {};
            cloneProps.style.flexGrow = 1; // some controls like Select do not grow by default
        }

        return React.cloneElement(item, cloneProps);
    }
    const childrenFormatted = React.Children.map(children, cloneWithProps);

    if (error) {
        otherProps['aria-invalid'] = true;
    }

    // Render
    return (
        <Box
            className={toClassName(css.main, className)}
            {...createTestHook(__filename)}
            {...otherProps}
        >
            <div
                className={labelPosition === 'left' ? css.labelLeft : css.label}
                data-size={size}
                id={labelId}
            >
                {label}
                {tooltip && <Tooltip content={tooltip} />}
            </div>
            <Box
                className={css[controlsClassName]}
                flex={controlsLayout !== 'none'}
                data-role="controls"
            >
                {childrenFormatted}
            </Box>
            {help && (help.type === Help) && React.cloneElement(help, { id: helpId })}
            {help && (help.type !== Help) && <Help id={helpId}>{help}</Help>}
        </Box>
    );
}

ControlGroup.propTypes = propTypes;
ControlGroup.defaultProps = defaultProps;
ControlGroup.Help = Help;
