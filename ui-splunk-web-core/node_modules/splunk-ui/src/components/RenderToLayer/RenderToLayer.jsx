// Originally adapted from:
// https://github.com/callemall/material-ui/blob/master/src/internal/RenderToLayer.js

import { Component, PropTypes } from 'react';
import { unstable_renderSubtreeIntoContainer, unmountComponentAtNode } from 'react-dom'; // eslint-disable-line

// heavily inspired by https://github.com/Khan/react-components/blob/master/js/layered-component-mixin.jsx
class RenderToLayer extends Component {
    static propTypes = {
        componentClickAway: PropTypes.func,
        open: PropTypes.bool,
        render: PropTypes.func.isRequired,
        useLayerForClickAway: PropTypes.bool,
    };

    static defaultProps = {
        useLayerForClickAway: true,
        open: false,
    };

    componentDidMount() {
        this.renderLayer();
    }

    componentDidUpdate() {
        this.renderLayer();
    }

    componentWillUnmount() {
        this.unrenderLayer();
    }

    onClickLayer = (event) => {
        this.layerClickEvent = event;
    }

    onClickAway = (event) => {
        // clicks inside the layer should not be considered clickAways
        if (!this.props.useLayerForClickAway && this.layerClickEvent === event) {
            return;
        }

        if (!this.props.componentClickAway) {
            return;
        }

        if (!this.props.open) {
            return;
        }

        if (this.props.useLayerForClickAway && event.target !== this.layer) {
            return;
        }

        this.props.componentClickAway(event);
    }

    unrenderLayer() {
        window.clearTimeout(this.addListenersTimeout);
        if (!this.layer) {
            return;
        }

        if (this.props.useLayerForClickAway) {
            this.layer.style.position = 'relative';
            this.layer.removeEventListener('touchstart', this.onClickAway);
            this.layer.removeEventListener('click', this.onClickAway);
        } else {
            this.layer.removeEventListener('click', this.onClickLayer);
            window.removeEventListener('touchstart', this.onClickAway);
            window.removeEventListener('click', this.onClickAway);
        }

        unmountComponentAtNode(this.layer);
        document.body.removeChild(this.layer);
        this.layer = null;
    }

    /**
     * By calling this method in componentDidMount() and
     * componentDidUpdate(), you're effectively creating a "wormhole" that
     * funnels React's hierarchical updates through to a DOM node on an
     * entirely different part of the page.
     */
    renderLayer() {
        const {
            open,
            render,
        } = this.props;
        if (open) {
            if (!this.layer) {
                this.layer = document.createElement('div');
                document.body.appendChild(this.layer);
                if (this.props.useLayerForClickAway) {
                    this.layer.addEventListener('touchstart', this.onClickAway);
                    this.layer.addEventListener('click', this.onClickAway);
                    this.layer.style.position = 'fixed';
                    this.layer.style.top = 0;
                    this.layer.style.bottom = 0;
                    this.layer.style.left = 0;
                    this.layer.style.right = 0;
                } else {
                    this.addListenersTimeout = setTimeout(() => {
                        this.layer.addEventListener('click', this.onClickLayer);
                        window.addEventListener('touchstart', this.onClickAway);
                        window.addEventListener('click', this.onClickAway);
                    }, 0);
                }
            }

            const layerElement = render();
            this.layerElement = unstable_renderSubtreeIntoContainer(this, layerElement, this.layer);
        } else {
            this.unrenderLayer();
        }
    }

    render() {
        return null;
    }
}

export default RenderToLayer;
