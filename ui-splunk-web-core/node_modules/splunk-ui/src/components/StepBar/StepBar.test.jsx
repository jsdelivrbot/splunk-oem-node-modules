/* eslint-env mocha */

import React from 'react';
import { assert } from 'chai';
import { mount } from 'enzyme';
import StepBar from './StepBar';

describe('StepBar', () => {
    it('step selection 0', () => {
        const wrapper = mount(
            <StepBar activeStepId={0}>
                <StepBar.Step label="One" />
                <StepBar.Step label="Two" />
                <StepBar.Step label="Three" />
            </StepBar>
        );
        const steps = wrapper.find('Step');
        const step1 = steps.at(0);
        assert.equal(step1.prop('status'), 'active', 'step 1 is status active');
        assert.isFalse(step1.prop('isLast'), 'step 1 is not last');
        const step2 = steps.at(1);
        assert.equal(step2.prop('status'), 'next', 'step 2 is status next');
        assert.isFalse(step1.prop('isLast'), 'step 2 is not last');
        const step3 = steps.at(2);
        assert.equal(step3.prop('status'), 'next', 'step 3 is status next');
        assert.isTrue(step3.prop('isLast'), 'step 3 is last');
    });

    it('step selection 1', () => {
        const wrapper = mount(
            <StepBar activeStepId={1}>
                <StepBar.Step label="One" />
                <StepBar.Step label="Two" />
                <StepBar.Step label="Three" />
            </StepBar>
        );
        const steps = wrapper.find('Step');
        const step1 = steps.at(0);
        assert.equal(step1.prop('status'), 'prev', 'step 1 is status prev');
        assert.isFalse(step1.prop('isLast'), 'step 1 is not last');
        const step2 = steps.at(1);
        assert.equal(step2.prop('status'), 'active', 'step 2 is status active');
        assert.isFalse(step1.prop('isLast'), 'step 2 is not last');
        const step3 = steps.at(2);
        assert.equal(step3.prop('status'), 'next', 'step 3 is status next');
        assert.isTrue(step3.prop('isLast'), 'step 3 is last');
    });

    it('step selection 2', () => {
        const wrapper = mount(
            <StepBar activeStepId={2}>
                <StepBar.Step label="One" />
                <StepBar.Step label="Two" />
                <StepBar.Step label="Three" />
            </StepBar>
        );
        const steps = wrapper.find('Step');
        const step1 = steps.at(0);
        assert.equal(step1.prop('status'), 'prev', 'step 1 is status prev');
        assert.isFalse(step1.prop('isLast'), 'step 1 is not last');
        const step2 = steps.at(1);
        assert.equal(step2.prop('status'), 'prev', 'step 2 is status active');
        assert.isFalse(step1.prop('isLast'), 'step 2 is not last');
        const step3 = steps.at(2);
        assert.equal(step3.prop('status'), 'active', 'step 3 is status next');
        assert.isTrue(step3.prop('isLast'), 'step 3 is last');
    });
});
