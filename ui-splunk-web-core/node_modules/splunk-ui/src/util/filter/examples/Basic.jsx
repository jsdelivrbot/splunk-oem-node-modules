import React, { Component } from 'react';
import { each } from 'lodash';
import filterUtil from 'splunk-ui/util/filter';
import List from 'splunk-ui/components/List';
import Text from 'splunk-ui/components/Text';

class Basic extends Component {
    constructor() {
        super();
        this.state = {
            result: this.strings,
        };
    }
    strings = [
        'Web Database Applications with PHP & MySQL',
        'Creating Database Web Applications with PHP and ASP',
        'Building Database Applications on the Web Using PHP3',
        'WebRAD: Building Database Applications on the Web with Visual ' +
            'FoxPro and Web Connection',
    ];
    handleInputChange = (e, { value }) => {
        const result = filterUtil.match(value, this.strings);
        if (result.length > 0) {
            this.setState({ result });
        } else {
            this.setState({
                result: this.strings,
            });
        }
    }
    highlightWords({ originString, highlightIndexes }) {
        const result = [];
        let currentIdx = 0;
        if (highlightIndexes == null || highlightIndexes.length === 0) {
            return originString;
        }
        const indexes = highlightIndexes.sort((e1, e2) => (e1.start - e2.start));
        let key = 0;
        each(indexes, (highlightIndex) => {
            const { start, length } = highlightIndex;
            if (currentIdx !== start) {
                result.push(<span key={key}>{originString.substring(currentIdx, start)}</span>);
                currentIdx = start;
                key++;
            }
            result.push(<strong key={key}>{originString.substring(start, start + length)}</strong>);
            currentIdx += length;
            key++;
        });
        if (currentIdx <= originString.length) {
            result.push(
                <span key={key}>
                    {originString.substring(currentIdx, originString.length)}
                </span>
            );
        }
        return result;
    }

    generateItem(results) {
        const items = results.map((result, idx) => {
            if (typeof (result) === 'object') {
                return (<List.Item key={idx}>{this.highlightWords(result)}</List.Item>);
            }
            return (<List.Item key={idx}>{result}</List.Item>);
        });
        return items;
    }

    render() {
        return (
            <div>
                <Text canClear onChange={this.handleInputChange} />
                <List>
                    {this.generateItem(this.state.result)}
                </List>
            </div>
        );
    }
}

export default Basic;
