module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(1);
	
	var _reactDom = __webpack_require__(25);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // Originally adapted from:
	// https://github.com/callemall/material-ui/blob/master/src/internal/RenderToLayer.js
	
	// eslint-disable-line
	
	// heavily inspired by https://github.com/Khan/react-components/blob/master/js/layered-component-mixin.jsx
	var RenderToLayer = function (_Component) {
	    _inherits(RenderToLayer, _Component);
	
	    function RenderToLayer() {
	        var _ref;
	
	        var _temp, _this, _ret;
	
	        _classCallCheck(this, RenderToLayer);
	
	        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	            args[_key] = arguments[_key];
	        }
	
	        return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = RenderToLayer.__proto__ || Object.getPrototypeOf(RenderToLayer)).call.apply(_ref, [this].concat(args))), _this), _this.onClickLayer = function (event) {
	            _this.layerClickEvent = event;
	        }, _this.onClickAway = function (event) {
	            // clicks inside the layer should not be considered clickAways
	            if (!_this.props.useLayerForClickAway && _this.layerClickEvent === event) {
	                return;
	            }
	
	            if (!_this.props.componentClickAway) {
	                return;
	            }
	
	            if (!_this.props.open) {
	                return;
	            }
	
	            if (_this.props.useLayerForClickAway && event.target !== _this.layer) {
	                return;
	            }
	
	            _this.props.componentClickAway(event);
	        }, _temp), _possibleConstructorReturn(_this, _ret);
	    }
	
	    _createClass(RenderToLayer, [{
	        key: 'componentDidMount',
	        value: function componentDidMount() {
	            this.renderLayer();
	        }
	    }, {
	        key: 'componentDidUpdate',
	        value: function componentDidUpdate() {
	            this.renderLayer();
	        }
	    }, {
	        key: 'componentWillUnmount',
	        value: function componentWillUnmount() {
	            this.unrenderLayer();
	        }
	    }, {
	        key: 'unrenderLayer',
	        value: function unrenderLayer() {
	            window.clearTimeout(this.addListenersTimeout);
	            if (!this.layer) {
	                return;
	            }
	
	            if (this.props.useLayerForClickAway) {
	                this.layer.style.position = 'relative';
	                this.layer.removeEventListener('touchstart', this.onClickAway);
	                this.layer.removeEventListener('click', this.onClickAway);
	            } else {
	                this.layer.removeEventListener('click', this.onClickLayer);
	                window.removeEventListener('touchstart', this.onClickAway);
	                window.removeEventListener('click', this.onClickAway);
	            }
	
	            (0, _reactDom.unmountComponentAtNode)(this.layer);
	            document.body.removeChild(this.layer);
	            this.layer = null;
	        }
	
	        /**
	         * By calling this method in componentDidMount() and
	         * componentDidUpdate(), you're effectively creating a "wormhole" that
	         * funnels React's hierarchical updates through to a DOM node on an
	         * entirely different part of the page.
	         */
	
	    }, {
	        key: 'renderLayer',
	        value: function renderLayer() {
	            var _this2 = this;
	
	            var _props = this.props,
	                open = _props.open,
	                render = _props.render;
	
	            if (open) {
	                if (!this.layer) {
	                    this.layer = document.createElement('div');
	                    document.body.appendChild(this.layer);
	                    if (this.props.useLayerForClickAway) {
	                        this.layer.addEventListener('touchstart', this.onClickAway);
	                        this.layer.addEventListener('click', this.onClickAway);
	                        this.layer.style.position = 'fixed';
	                        this.layer.style.top = 0;
	                        this.layer.style.bottom = 0;
	                        this.layer.style.left = 0;
	                        this.layer.style.right = 0;
	                    } else {
	                        this.addListenersTimeout = setTimeout(function () {
	                            _this2.layer.addEventListener('click', _this2.onClickLayer);
	                            window.addEventListener('touchstart', _this2.onClickAway);
	                            window.addEventListener('click', _this2.onClickAway);
	                        }, 0);
	                    }
	                }
	
	                var layerElement = render();
	                this.layerElement = (0, _reactDom.unstable_renderSubtreeIntoContainer)(this, layerElement, this.layer);
	            } else {
	                this.unrenderLayer();
	            }
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            return null;
	        }
	    }]);
	
	    return RenderToLayer;
	}(_react.Component);
	
	RenderToLayer.propTypes = {
	    componentClickAway: _react.PropTypes.func,
	    open: _react.PropTypes.bool,
	    render: _react.PropTypes.func.isRequired,
	    useLayerForClickAway: _react.PropTypes.bool
	};
	RenderToLayer.defaultProps = {
	    useLayerForClickAway: true,
	    open: false
	};
	exports.default = RenderToLayer;

/***/ },

/***/ 1:
/***/ function(module, exports) {

	module.exports = require("react");

/***/ },

/***/ 25:
/***/ function(module, exports) {

	module.exports = require("react-dom");

/***/ }

/******/ });
//# sourceMappingURL=RenderToLayer.js.map