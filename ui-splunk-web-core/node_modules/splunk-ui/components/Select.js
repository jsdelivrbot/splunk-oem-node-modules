module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(__filename) {'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _lodash = __webpack_require__(9);
	
	var _errorHandling = __webpack_require__(11);
	
	var _filter = __webpack_require__(31);
	
	var _filter2 = _interopRequireDefault(_filter);
	
	var _i18n = __webpack_require__(3);
	
	var _keyboard = __webpack_require__(12);
	
	var _testSupport = __webpack_require__(2);
	
	var _userAgent = __webpack_require__(33);
	
	var _Button = __webpack_require__(15);
	
	var _Button2 = _interopRequireDefault(_Button);
	
	var _Dropdown = __webpack_require__(36);
	
	var _Dropdown2 = _interopRequireDefault(_Dropdown);
	
	var _ResultsMenu = __webpack_require__(26);
	
	var _ResultsMenu2 = _interopRequireDefault(_ResultsMenu);
	
	var _Text = __webpack_require__(20);
	
	var _Text2 = _interopRequireDefault(_Text);
	
	var _Divider = __webpack_require__(202);
	
	var _Divider2 = _interopRequireDefault(_Divider);
	
	var _Option = __webpack_require__(203);
	
	var _Option2 = _interopRequireDefault(_Option);
	
	var _Select = __webpack_require__(503);
	
	var _Select2 = _interopRequireDefault(_Select);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var Select = function (_Component) {
	    _inherits(Select, _Component);
	
	    function Select(props) {
	        var _ref;
	
	        _classCallCheck(this, Select);
	
	        for (var _len = arguments.length, rest = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	            rest[_key - 1] = arguments[_key];
	        }
	
	        var _this = _possibleConstructorReturn(this, (_ref = Select.__proto__ || Object.getPrototypeOf(Select)).call.apply(_ref, [this, props].concat(rest)));
	
	        _this.handleActiveOptionMount = function (comp) {
	            if (comp) {
	                comp.scrollIntoViewIfNeeded();
	            }
	        };
	
	        _this.handleTextKeyDown = function (e) {
	            if ((0, _keyboard.keycode)(e) === 'tab') {
	                e.preventDefault();
	                return;
	            }
	
	            if (e.shiftKey || e.metaKey || e.ctrlKey) {
	                return;
	            }
	
	            if ((0, _keyboard.keycode)(e) === 'down') {
	                e.preventDefault();
	
	                _this.setState({
	                    activeIndex: Math.min(_this.state.activeIndex + 1, _this.availableOptionCount - 1)
	                });
	            }
	
	            if ((0, _keyboard.keycode)(e) === 'up') {
	                e.preventDefault();
	
	                _this.setState({
	                    activeIndex: Math.max(_this.state.activeIndex - 1, 0)
	                });
	            }
	
	            if ((0, _keyboard.keycode)(e) === 'enter' && _this.activeValue) {
	                e.preventDefault();
	                _this.selectValue(e, { value: _this.activeValue });
	            }
	        };
	
	        _this.handleTextChange = function (e, data) {
	            e.preventDefault();
	
	            _this.setState({
	                activeIndex: 0,
	                filterKeyword: data.value,
	                open: true
	            });
	
	            _this.props.onFilterChange(e, { keyword: data.value });
	        };
	
	        _this.handleTextKeyUp = function (e) {
	            if ((0, _keyboard.keycode)(e) === 'tab') {
	                e.preventDefault();
	                return;
	            }
	        };
	
	        _this.handleItemClick = function (e, _ref2) {
	            var value = _ref2.value;
	
	            _this.selectValue(e, { value: value });
	        };
	
	        _this.handleRequestOpen = function () {
	            _this.setState({
	                open: true
	            });
	        };
	
	        _this.handleRequestClose = function () {
	            _this.setState({
	                open: false,
	                filterKeyword: '',
	                activeIndex: 0
	            });
	        };
	
	        _this.filterChildren = function (items, keyword) {
	            var filtered = _filter2.default.filterByKeywords(items, keyword, function (item) {
	                if (item.type === _Option2.default) {
	                    return item.props.label;
	                }
	                return null;
	            });
	            // filter out consecutive Divider
	            return filtered.reduce(function (previous, current) {
	                if (current.type === _Divider2.default) {
	                    if (previous.length === 0 || previous[previous.length - 1].type === _Divider2.default) {
	                        return previous;
	                    }
	                }
	                previous.push(current);
	                return previous;
	            }, []);
	        };
	
	        _this.controlledExternally = (0, _lodash.has)(props, 'value');
	
	        _this.state = {
	            value: props.defaultValue || '',
	            open: false,
	            filterKeyword: _this.props.filter ? '' : null,
	            activeIndex: 0
	        };
	
	        if ((process.env.NODE_ENV !== "production") && _this.isControlled() && (0, _lodash.has)(props, 'defaultValue')) {
	            (0, _errorHandling.invariant)('Select defaultValue prop is not compatible with value prop.');
	        }
	
	        if ((process.env.NODE_ENV !== "production") && _this.isControlled() && props.onChange === _lodash.noop) {
	            (0, _errorHandling.invariant)('Select onChange prop is required. This must update the value prop\n                to retain user input.');
	        }
	        return _this;
	    }
	
	    _createClass(Select, [{
	        key: 'componentWillReceiveProps',
	        value: function componentWillReceiveProps(nextProps) {
	            if ((process.env.NODE_ENV !== "production") && !this.isControlled() && (0, _lodash.has)(nextProps, 'value')) {
	                (0, _errorHandling.invariant)('Cannot change Select from an uncontrolled component to a controlled\n                one. Prop \'value\' is not valid in subsequent updates if not provided in the initial\n                props.');
	            }
	
	            if ((process.env.NODE_ENV !== "production") && nextProps.defaultValue !== this.props.defaultValue) {
	                (0, _errorHandling.invariant)('Cannot change Select defaultValue after set.');
	            }
	        }
	    }, {
	        key: 'getCurrentValue',
	        value: function getCurrentValue() {
	            return this.isControlled() ? this.props.value : this.state.value;
	        }
	    }, {
	        key: 'isControlled',
	        value: function isControlled() {
	            return this.controlledExternally;
	        }
	    }, {
	        key: 'focus',
	
	
	        /**
	        * Place focus on the toggle.
	        */
	        value: function focus() {
	            if (this.dropdown) {
	                this.dropdown.focus();
	            }
	        }
	    }, {
	        key: 'selectValue',
	        value: function selectValue(e, _ref3) {
	            var value = _ref3.value;
	
	            if (!this.isControlled()) {
	                this.setState({ value: value });
	            }
	
	            this.handleRequestClose();
	
	            this.focus();
	
	            if (this.getCurrentValue() !== value) {
	                this.props.onChange(e, { value: value });
	            }
	        }
	    }, {
	        key: 'renderFilter',
	
	
	        // Setup Filter
	        value: function renderFilter() {
	            return this.props.filter ? _react2.default.createElement(
	                'div',
	                {
	                    key: 'filter',
	                    className: _Select2.default.filter,
	                    'data-placement': this.props.placement
	                },
	                _react2.default.createElement(_Text2.default, {
	                    value: this.state.filterKeyword,
	                    appearance: 'search',
	                    onChange: this.handleTextChange,
	                    onKeyDown: this.handleTextKeyDown,
	                    onKeyUp: this.handleTextKeyUp,
	                    placeholder: (0, _i18n._)('filter'),
	                    tabIndex: 1
	                })
	            ) : null;
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            var _this2 = this;
	
	            var _props = this.props,
	                children = _props.children,
	                describedBy = _props.describedBy,
	                error = _props.error,
	                filter = _props.filter,
	                inline = _props.inline,
	                isLoadingOptions = _props.isLoadingOptions,
	                menuStyle = _props.menuStyle,
	                placeholder = _props.placeholder;
	            var _state = this.state,
	                filterKeyword = _state.filterKeyword,
	                open = _state.open;
	
	
	            this.activeValue = null;
	
	            var label = void 0;
	            var icon = void 0;
	            var childrenCleaned = _react.Children.map(children, function (item) {
	                if (item.type.isMenuDivider) {
	                    return item;
	                }
	
	                var selected = item.props.value === _this2.getCurrentValue();
	
	                // If selected, set up the label and icon for the toggle button.
	                if (selected) {
	                    label = (0, _lodash.has)(item.props, 'label') ? item.props.label : item.props.value;
	                    icon = item.props.icon;
	                    if (_this2.props.prefixLabel) {
	                        label = _this2.props.prefixLabel + ': ' + label;
	                    }
	                }
	
	                if (item.props.hidden) {
	                    return null;
	                }
	
	                return _react2.default.cloneElement(item, {
	                    selected: selected,
	                    selectable: true
	                });
	            });
	
	            var childrenFiltered = filterKeyword && filter === true && childrenCleaned ? this.filterChildren(childrenCleaned, filterKeyword) : childrenCleaned;
	
	            // Setup Children
	            var childCount = _react.Children.count(childrenFiltered);
	            var childrenCloned = _react.Children.map(childrenFiltered, function (item, i) {
	                if (!item || !item.type) {
	                    return null;
	                }
	                if (item.type.isMenuDivider) {
	                    if (i === childCount - 1) {
	                        return null; // remove trailing divider
	                    }
	                    return _react2.default.cloneElement(item, {
	                        key: item.key || i
	                    });
	                }
	
	                return _react2.default.cloneElement(item, {
	                    key: item.key || i,
	                    onClick: _this2.handleItemClick
	                });
	            });
	
	            // Hightlight Active
	            this.availableOptionCount = 0;
	            this.activeValue = null;
	
	            var highlightActive = function highlightActive(item) {
	                if (item.type.isMenuDivider) {
	                    return item;
	                }
	
	                var active = _this2.availableOptionCount === _this2.state.activeIndex;
	                _this2.availableOptionCount++;
	
	                if (!active) {
	                    return item;
	                }
	                _this2.activeValue = item.props.value;
	
	                return _react2.default.cloneElement(item, {
	                    ref: _this2.handleActiveOptionMount,
	                    active: true
	                });
	            };
	            var finalChildren = filter ? _react.Children.map(childrenCloned, highlightActive) : childrenCloned;
	
	            var toggle = _react2.default.createElement(_Button2.default, _extends({
	                error: error,
	                icon: icon,
	                inline: false,
	                isMenu: true,
	                label: label || placeholder
	            }, (0, _lodash.pick)(this.props, 'appearance', 'append', 'disabled', 'prepend', 'size')));
	
	            var createMenu = function createMenu(_ref4) {
	                var anchorWidth = _ref4.anchorWidth,
	                    maxHeight = _ref4.maxHeight,
	                    placement = _ref4.placement;
	                return _react2.default.createElement(
	                    _ResultsMenu2.default,
	                    _extends({
	                        childrenStart: _this2.renderFilter(),
	                        maxHeight: maxHeight,
	                        placement: placement,
	                        isLoading: isLoadingOptions
	                    }, (0, _lodash.pick)(_this2.props, 'noOptionsMessage', 'footerMessage', 'animateLoading', 'loadingMessage'), {
	                        style: _extends({
	                            minWidth: (0, _userAgent.isIE11)() && anchorWidth < 300 ? 300 : anchorWidth,
	                            maxWidth: Math.max(anchorWidth, 300)
	                        }, menuStyle)
	                    }),
	                    finalChildren
	                );
	            };
	
	            return _react2.default.createElement(
	                _Dropdown2.default,
	                _extends({
	                    toggle: toggle,
	                    inline: inline,
	                    open: open,
	                    retainFocus: !filter,
	                    closeReasons: ['clickAway', 'escapeKey', 'offScreen', 'toggleClick'],
	                    onRequestClose: this.handleRequestClose,
	                    onRequestOpen: this.handleRequestOpen,
	                    'aria-describedby': describedBy,
	                    defaultPlacement: filter ? 'vertical' : undefined,
	                    canCoverAnchor: window.innerHeight < 500,
	                    ref: function ref(c) {
	                        return _this2.dropdown = c;
	                    }
	                }, (0, _testSupport.createTestHook)(__filename), (0, _lodash.omit)(this.props, Object.keys(Select.propTypes))),
	                createMenu
	            );
	        }
	    }]);
	
	    return Select;
	}(_react.Component);
	
	Select.propTypes = {
	    /*
	     * Whether or not to show the wait spinner when loading. It's recommended to set this to
	     * `true` when loading may take more than one second.
	     */
	    animateLoading: _react.PropTypes.bool,
	    /** Change the style of the button. */
	    appearance: _react.PropTypes.oneOf(['default', 'primary', 'pill']),
	    /**
	    * Remove rounding from the left side of the toggle.
	    */
	    append: _react.PropTypes.bool,
	    /**
	     * `children` should be `Select.Option` or `Select.Divider`.
	     */
	    children: _react.PropTypes.node,
	    /**
	    * Set this property instead of value to keep the value uncontrolled.
	    */
	    defaultValue: _react.PropTypes.any,
	    /**
	    * The id of the description. When placed in a ControlGroup, this automatically set to the
	    * ControlGroup's help component.
	    */
	    describedBy: _react.PropTypes.string,
	    /**
	    * disabled to toggle.
	    */
	    disabled: _react.PropTypes.bool,
	    /**
	    * Highlight the field as having an error. The button will turn red.
	    */
	    error: _react.PropTypes.bool,
	    /**
	    * Whether to show the filter box. When true, the children are automatically
	    * filtered based on the label. When controlled, the parent component must provide a
	    * onFilterChange callback and update the children. This can also be used to fetch new
	    * results. */
	    filter: _react.PropTypes.oneOf([false, true, 'controlled']),
	    /**
	     * The footer message can show additional information, such as a truncation message.
	     */
	    footerMessage: _react.PropTypes.node,
	    /** Make the control an inline block with variable width. */
	    inline: _react.PropTypes.bool,
	    /*
	     * Whether or not to show the loading message and/or wait spinner. It's recommended to
	     * remove the old children while loading new children to ensure the loading message is
	     * not hidden.
	     */
	    isLoadingOptions: _react.PropTypes.bool,
	    /**
	    * The id of the label. When placed in a ControlGroup, this automatically set to the
	    * ControlGroup's label.
	    */
	    labelledBy: _react.PropTypes.string,
	    /**
	     * The loading message to show when isLoadingOptions. */
	    loadingMessage: _react.PropTypes.node,
	    menuStyle: _react.PropTypes.object,
	    /**
	     * The noOptionsMessage is shown when there are no children and not loading, such as when
	     * there are no Options matching the filter. This can be customized to the type of content,
	     * such as "No matching dashboards"; insert other content, such as an error message; or
	     * communicate a minimum number of chararters to enter to see results. */
	    noOptionsMessage: _react.PropTypes.node,
	    /**
	    * A callback to receive the change events.
	    * If value is set, this callback is required. This must set the value prop to retain the
	    * change.
	    */
	    onChange: _react.PropTypes.func,
	    /**
	    * A callback with the change event and value of the filter box. Providing this callback and
	    * setting controlledFilter to true enables you to filter and update the children by other
	    * criteria.
	    */
	    onFilterChange: _react.PropTypes.func,
	    /**
	    * If 'value' is undefined or don't match an item, the Button will display this text.
	    */
	    placeholder: _react.PropTypes.string,
	    /**
	    * When used outside of a control group, it can be useful to include the label on the toggle.
	    */
	    prefixLabel: _react.PropTypes.string,
	    /**
	    * Remove rounding from the left side of the toggle.
	    */
	    prepend: _react.PropTypes.bool,
	    /** The size of the toggle. */
	    size: _react.PropTypes.oneOf(['small', 'medium', 'large']),
	    /**
	    * Value will be matched to one of the children to deduce the label and/or icon for the
	    * toggle.
	    */
	    value: _react.PropTypes.any
	};
	Select.defaultProps = {
	    animateLoading: false,
	    appearance: 'default',
	    append: false,
	    children: [],
	    disabled: false,
	    error: false,
	    filter: false,
	    inline: true,
	    isLoadingOptions: false,
	    menuStyle: {},
	    noOptionsMessage: (0, _i18n._)('No matches'),
	    onFilterChange: _lodash.noop,
	    onChange: _lodash.noop,
	    placeholder: (0, _i18n._)('Select...'),
	    prepend: false,
	    size: 'medium'
	};
	Select.Option = _Option2.default;
	Select.Divider = _Divider2.default;
	exports.default = Select;
	/* WEBPACK VAR INJECTION */}.call(exports, "src/components/Select/Select.jsx"))

/***/ },

/***/ 1:
/***/ function(module, exports) {

	module.exports = require("react");

/***/ },

/***/ 2:
/***/ function(module, exports) {

	module.exports = require("splunk-ui/util/testSupport");

/***/ },

/***/ 3:
/***/ function(module, exports) {

	module.exports = require("splunk-ui/util/i18n");

/***/ },

/***/ 5:
/***/ function(module, exports) {

	module.exports = function(module) {
		if(!module.webpackPolyfill) {
			module.deprecate = function() {};
			module.paths = [];
			// module.parent = undefined by default
			module.children = [];
			module.webpackPolyfill = 1;
		}
		return module;
	}


/***/ },

/***/ 6:
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var stylesInDom = {},
		memoize = function(fn) {
			var memo;
			return function () {
				if (typeof memo === "undefined") memo = fn.apply(this, arguments);
				return memo;
			};
		},
		isOldIE = memoize(function() {
			return /msie [6-9]\b/.test(window.navigator.userAgent.toLowerCase());
		}),
		getHeadElement = memoize(function () {
			return document.head || document.getElementsByTagName("head")[0];
		}),
		singletonElement = null,
		singletonCounter = 0,
		styleElementsInsertedAtTop = [];
	
	module.exports = function(list, options) {
		if(false) {
			if(typeof document !== "object") throw new Error("The style-loader cannot be used in a non-browser environment");
		}
	
		options = options || {};
		// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>
		// tags it will allow on a page
		if (typeof options.singleton === "undefined") options.singleton = isOldIE();
	
		// By default, add <style> tags to the bottom of <head>.
		if (typeof options.insertAt === "undefined") options.insertAt = "bottom";
	
		var styles = listToStyles(list);
		addStylesToDom(styles, options);
	
		return function update(newList) {
			var mayRemove = [];
			for(var i = 0; i < styles.length; i++) {
				var item = styles[i];
				var domStyle = stylesInDom[item.id];
				domStyle.refs--;
				mayRemove.push(domStyle);
			}
			if(newList) {
				var newStyles = listToStyles(newList);
				addStylesToDom(newStyles, options);
			}
			for(var i = 0; i < mayRemove.length; i++) {
				var domStyle = mayRemove[i];
				if(domStyle.refs === 0) {
					for(var j = 0; j < domStyle.parts.length; j++)
						domStyle.parts[j]();
					delete stylesInDom[domStyle.id];
				}
			}
		};
	}
	
	function addStylesToDom(styles, options) {
		for(var i = 0; i < styles.length; i++) {
			var item = styles[i];
			var domStyle = stylesInDom[item.id];
			if(domStyle) {
				domStyle.refs++;
				for(var j = 0; j < domStyle.parts.length; j++) {
					domStyle.parts[j](item.parts[j]);
				}
				for(; j < item.parts.length; j++) {
					domStyle.parts.push(addStyle(item.parts[j], options));
				}
			} else {
				var parts = [];
				for(var j = 0; j < item.parts.length; j++) {
					parts.push(addStyle(item.parts[j], options));
				}
				stylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};
			}
		}
	}
	
	function listToStyles(list) {
		var styles = [];
		var newStyles = {};
		for(var i = 0; i < list.length; i++) {
			var item = list[i];
			var id = item[0];
			var css = item[1];
			var media = item[2];
			var sourceMap = item[3];
			var part = {css: css, media: media, sourceMap: sourceMap};
			if(!newStyles[id])
				styles.push(newStyles[id] = {id: id, parts: [part]});
			else
				newStyles[id].parts.push(part);
		}
		return styles;
	}
	
	function insertStyleElement(options, styleElement) {
		var head = getHeadElement();
		var lastStyleElementInsertedAtTop = styleElementsInsertedAtTop[styleElementsInsertedAtTop.length - 1];
		if (options.insertAt === "top") {
			if(!lastStyleElementInsertedAtTop) {
				head.insertBefore(styleElement, head.firstChild);
			} else if(lastStyleElementInsertedAtTop.nextSibling) {
				head.insertBefore(styleElement, lastStyleElementInsertedAtTop.nextSibling);
			} else {
				head.appendChild(styleElement);
			}
			styleElementsInsertedAtTop.push(styleElement);
		} else if (options.insertAt === "bottom") {
			head.appendChild(styleElement);
		} else {
			throw new Error("Invalid value for parameter 'insertAt'. Must be 'top' or 'bottom'.");
		}
	}
	
	function removeStyleElement(styleElement) {
		styleElement.parentNode.removeChild(styleElement);
		var idx = styleElementsInsertedAtTop.indexOf(styleElement);
		if(idx >= 0) {
			styleElementsInsertedAtTop.splice(idx, 1);
		}
	}
	
	function createStyleElement(options) {
		var styleElement = document.createElement("style");
		styleElement.type = "text/css";
		insertStyleElement(options, styleElement);
		return styleElement;
	}
	
	function createLinkElement(options) {
		var linkElement = document.createElement("link");
		linkElement.rel = "stylesheet";
		insertStyleElement(options, linkElement);
		return linkElement;
	}
	
	function addStyle(obj, options) {
		var styleElement, update, remove;
	
		if (options.singleton) {
			var styleIndex = singletonCounter++;
			styleElement = singletonElement || (singletonElement = createStyleElement(options));
			update = applyToSingletonTag.bind(null, styleElement, styleIndex, false);
			remove = applyToSingletonTag.bind(null, styleElement, styleIndex, true);
		} else if(obj.sourceMap &&
			typeof URL === "function" &&
			typeof URL.createObjectURL === "function" &&
			typeof URL.revokeObjectURL === "function" &&
			typeof Blob === "function" &&
			typeof btoa === "function") {
			styleElement = createLinkElement(options);
			update = updateLink.bind(null, styleElement);
			remove = function() {
				removeStyleElement(styleElement);
				if(styleElement.href)
					URL.revokeObjectURL(styleElement.href);
			};
		} else {
			styleElement = createStyleElement(options);
			update = applyToTag.bind(null, styleElement);
			remove = function() {
				removeStyleElement(styleElement);
			};
		}
	
		update(obj);
	
		return function updateStyle(newObj) {
			if(newObj) {
				if(newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap)
					return;
				update(obj = newObj);
			} else {
				remove();
			}
		};
	}
	
	var replaceText = (function () {
		var textStore = [];
	
		return function (index, replacement) {
			textStore[index] = replacement;
			return textStore.filter(Boolean).join('\n');
		};
	})();
	
	function applyToSingletonTag(styleElement, index, remove, obj) {
		var css = remove ? "" : obj.css;
	
		if (styleElement.styleSheet) {
			styleElement.styleSheet.cssText = replaceText(index, css);
		} else {
			var cssNode = document.createTextNode(css);
			var childNodes = styleElement.childNodes;
			if (childNodes[index]) styleElement.removeChild(childNodes[index]);
			if (childNodes.length) {
				styleElement.insertBefore(cssNode, childNodes[index]);
			} else {
				styleElement.appendChild(cssNode);
			}
		}
	}
	
	function applyToTag(styleElement, obj) {
		var css = obj.css;
		var media = obj.media;
	
		if(media) {
			styleElement.setAttribute("media", media)
		}
	
		if(styleElement.styleSheet) {
			styleElement.styleSheet.cssText = css;
		} else {
			while(styleElement.firstChild) {
				styleElement.removeChild(styleElement.firstChild);
			}
			styleElement.appendChild(document.createTextNode(css));
		}
	}
	
	function updateLink(linkElement, obj) {
		var css = obj.css;
		var sourceMap = obj.sourceMap;
	
		if(sourceMap) {
			// http://stackoverflow.com/a/26603875
			css += "\n/*# sourceMappingURL=data:application/json;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + " */";
		}
	
		var blob = new Blob([css], { type: "text/css" });
	
		var oldSrc = linkElement.href;
	
		linkElement.href = URL.createObjectURL(blob);
	
		if(oldSrc)
			URL.revokeObjectURL(oldSrc);
	}


/***/ },

/***/ 9:
/***/ function(module, exports) {

	module.exports = require("lodash");

/***/ },

/***/ 11:
/***/ function(module, exports) {

	module.exports = require("splunk-ui/util/errorHandling");

/***/ },

/***/ 12:
/***/ function(module, exports) {

	module.exports = require("splunk-ui/util/keyboard");

/***/ },

/***/ 15:
/***/ function(module, exports) {

	module.exports = require("splunk-ui/components/Button");

/***/ },

/***/ 18:
/***/ function(module, exports) {

	module.exports = require("splunk-ui/components/Menu");

/***/ },

/***/ 20:
/***/ function(module, exports) {

	module.exports = require("splunk-ui/components/Text");

/***/ },

/***/ 26:
/***/ function(module, exports) {

	module.exports = require("splunk-ui/components/ResultsMenu");

/***/ },

/***/ 31:
/***/ function(module, exports) {

	module.exports = require("splunk-ui/util/filter");

/***/ },

/***/ 33:
/***/ function(module, exports) {

	module.exports = require("splunk-ui/util/userAgent");

/***/ },

/***/ 36:
/***/ function(module, exports) {

	module.exports = require("splunk-ui/components/Dropdown");

/***/ },

/***/ 202:
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _Menu = __webpack_require__(18);
	
	var _Menu2 = _interopRequireDefault(_Menu);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = _Menu2.default.Divider;

/***/ },

/***/ 203:
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(__filename) {'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _lodash = __webpack_require__(9);
	
	var _testSupport = __webpack_require__(2);
	
	var _Menu = __webpack_require__(18);
	
	var _Menu2 = _interopRequireDefault(_Menu);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var Option = function (_Component) {
	    _inherits(Option, _Component);
	
	    function Option() {
	        var _ref;
	
	        var _temp, _this, _ret;
	
	        _classCallCheck(this, Option);
	
	        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	            args[_key] = arguments[_key];
	        }
	
	        return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Option.__proto__ || Object.getPrototypeOf(Option)).call.apply(_ref, [this].concat(args))), _this), _this.handleClick = function (e) {
	            var _this$props = _this.props,
	                onClick = _this$props.onClick,
	                value = _this$props.value,
	                disabled = _this$props.disabled;
	
	            if (!disabled) {
	                onClick(e, { value: value });
	            }
	        }, _temp), _possibleConstructorReturn(_this, _ret);
	    }
	
	    _createClass(Option, [{
	        key: 'scrollIntoViewIfNeeded',
	        value: function scrollIntoViewIfNeeded() {
	            this.c.scrollIntoViewIfNeeded();
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            var _this2 = this;
	
	            return _react2.default.createElement(_Menu2.default.Item, _extends({
	                ref: function ref(c) {
	                    return _this2.c = c;
	                }
	            }, (0, _testSupport.createTestHook)(__filename), {
	                selectable: true
	            }, this.props, {
	                onClick: this.handleClick
	            }));
	        }
	    }]);
	
	    return Option;
	}(_react.Component);
	
	Option.propTypes = {
	    /**
	    * Additional information to explain the option, such as "Recommended".
	    */
	    description: _react.PropTypes.string,
	    /**
	    * The description text may appear to the right of the label or under the label.
	    */
	    descriptionPosition: _react2.default.PropTypes.oneOf(['right', 'bottom']),
	    /**
	    * If disabled=true, the option is grayed out and cannot be clicked.
	    */
	    disabled: _react.PropTypes.bool,
	    /**
	    * Adding hidden options can be useful for resolving the selected display label and icon,
	    * when the option should not be in the list. This scenario can arise when Select's filter is
	    * controlled, because the selected item may be filtered out; and when a legacy option is
	    * valid, but should no longer be displayed as a selectable option.
	    */
	    hidden: _react.PropTypes.bool,
	    /**
	    * The icon to show before the label. See the Icon component for more information.
	    */
	    icon: _react.PropTypes.node,
	    /**
	    * The text to show for the option.
	    */
	    label: _react.PropTypes.string.isRequired,
	    /** @docs-ignore */
	    onClick: _react.PropTypes.func,
	    /** @docs-ignore */
	    selected: _react.PropTypes.bool,
	    /**
	    * If truncate=false, wrapping will be disabled and any additional text will be ellipsised.
	    */
	    truncate: _react.PropTypes.bool,
	    /**
	    * The label and/or icon will be placed on the Control's toggle if it matches this value.
	    */
	    value: _react.PropTypes.any.isRequired
	};
	Option.defaultProps = {
	    descriptionPosition: 'bottom',
	    disabled: false,
	    hidden: false,
	    onClick: _lodash.noop,
	    selected: false,
	    truncate: false
	};
	exports.default = Option;
	/* WEBPACK VAR INJECTION */}.call(exports, "src/components/Select/Option.jsx"))

/***/ },

/***/ 503:
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag
	
	// load the styles
	var content = __webpack_require__(572);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(6)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!./../../../tools/web_loaders/theme-loader/index.js!./Select.css", function() {
				var newContent = require("!!./../../../tools/web_loaders/theme-loader/index.js!./Select.css");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },

/***/ 572:
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {var styles = {"enterprise":".filter_Select__guid__c90191{padding:5px;min-width:160px}:not([data-placement=above])>.filter_Select__guid__c90191{border-bottom:1px solid #ccc}[data-placement=above]>.filter_Select__guid__c90191{border-top:1px solid #ccc}","lite":".filter_Select__guid__c90191{padding:5px;min-width:160px}:not([data-placement=above])>.filter_Select__guid__c90191{border-bottom:1px solid #ccc}[data-placement=above]>.filter_Select__guid__c90191{border-top:1px solid #ccc}"};
	var themeLocals = {"enterprise":{"-webkit-filter":"filter_Select__guid__c90191","filter":"filter_Select__guid__c90191"},"lite":{"-webkit-filter":"filter_Select__guid__c90191","filter":"filter_Select__guid__c90191"}};
	var isLite =
	    window.__splunkd_partials__ &&
	    window.__splunkd_partials__['/services/server/info'] &&
	    window.__splunkd_partials__['/services/server/info']
	        .entry[0].content.product_type === 'lite';
	var theme = window.__splunk_ui_theme__ || (isLite ? 'lite' : 'enterprise');
	
	function s4() {
	  return Math.floor((1 + Math.random()) * 0x10000)
	    .toString(16)
	    .substring(1);
	}
	var guid = module.guid ||  s4() + s4() + s4() + s4();
	// Add guid to locals
	Object.keys(themeLocals[theme]).forEach(function(className) {
	    var value = themeLocals[theme][className];
	    themeLocals[theme][className] =
	        value.replace(/_guid_/g, guid);
	 });
	//  Add guid to styles
	styles[theme] = styles[theme].replace(/_guid_/g, guid);
	module.exports = [[module.id, styles[theme], '']];
	module.exports.locals = themeLocals[theme];
	module.guid = guid;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)(module)))

/***/ }

/******/ });
//# sourceMappingURL=Select.js.map