import path from 'path';

import { map } from 'lodash';
import mkdirp from 'mkdirp';
import prompt from 'prompt';

import writeFile from './util/writeFile';
import statelessComponent from './templates/statelessComponent';
import statefulComponent from './templates/statefulComponent';

const componentsPath = path.join(__dirname, '../src/components');

export default function createComponent() {
    // Set up the schema for prompt
    return Promise.resolve({
        properties: {
            componentName: {
                pattern: /^[a-zA-Z]+$/,
                message: 'Component name must be only letter',
                required: true,
            },
            hasState: {
                description: 'Will this have state? (t/f)',
                type: 'boolean',
                default: true,
                required: true,
            },
        },
    })

    // Prompt for user input
    .then((schema) => new Promise((resolve, reject) => {
        prompt.message = '';
        prompt.start();
        prompt.get(schema, (err, options) => {
            if (err) reject(err);
            else resolve(options);
        });
    }))

    // Make a directory for the new component and its examples
    .then((options) => {
        const { componentName } = options;
        return new Promise((resolve, reject) => {
            mkdirp(path.join(componentsPath, componentName, 'examples'), (err) => {
                if (err) reject(err);
                else resolve(options);
            });
        });
    })
    // Output the files
    .then((options) => {
        const { hasState } = options;
        const templates = hasState ? statefulComponent(options) : statelessComponent(options);
        return Promise.all(map(templates, (contents, fileName) => writeFile(fileName, contents)));
    });
}
