import execa from 'execa';
import Listr from 'listr';
import { includes } from 'lodash';
import semver from 'semver';

import { version } from '../package.json';

const releaseTypes = ['patch', 'minor', 'major', 'prepatch', 'preminor', 'premajor', 'prerelease'];

const tasks = new Listr([
    {
        title: 'Cleaning environment',
        task: () => new Listr([
            {
                title: 'Installing node_modules',
                task: () => execa('yarn'),
            },
            {
                title: 'Validating node_modules',
                task: () => execa('yarn', ['check']),
            },
            {
                title: 'Cleaning previous build files',
                task: () => execa('yarn', ['run', 'clean']),
            },
        ]),
    },
    {
        title: 'Checking code quality',
        task: () => new Listr([
            {
                title: 'Stylelint',
                task: () => execa('yarn', ['run', 'stylelint']),
            },
            {
                title: 'Eslint',
                task: () => execa('yarn', ['run', 'eslint']),
            },
            {
                title: 'Unit tests',
                task: () => execa('yarn', ['run', 'test']),
            },
        ], { concurrent: true }),
    },
    {
        title: 'Updating and tagging version',
        task: () => new Listr([
            {
                title: 'Bumping version',
                task: ({ nextVersion }) => execa('yarn',
                    ['version', '--new-version', nextVersion]),
            },
            {
                title: 'Pushing git tag',
                task: () => execa('git', ['push', '--follow-tags']),
            },
        ]),
    },
    {
        title: 'Building artifacts',
        task: () => new Listr([
            {
                title: 'Source',
                task: () => execa('yarn', ['run', 'build:src']),
            },
            {
                title: 'Docs',
                task: () => execa('yarn', ['run', 'build:docs']),
            },
        ], { concurrent: true }),
    },
    {
        title: 'Publishing',
        task: ({ isPrerelease }) => execa('npm', ['publish']
            .concat(isPrerelease ? ['--tag', 'rc'] : [])),
    },
]);

export default function publish(releaseType) {
    if (!includes(releaseTypes, releaseType)) {
        throw new Error(`Invalid release type. Must be one of: ${releaseTypes}`);
    }

    if (semver.prerelease(version)) {
        if (/^pre/.test(releaseType) && releaseType !== 'prerelease') {
            throw new Error(`Invalid release type. The current version is a prerelease. Use
                'prerelease' to incremement the prerelease version, or use 'patch', 'minor', or
                'major'.`);
        }
    } else if (!/^pre/.test(releaseType)) {
        throw new Error('Publish a prerelease version before attempting a release version.');
    }

    const isPrerelease = /^pre/.test(releaseType);
    const nextVersion = isPrerelease ?
        semver.inc(version, releaseType, 'rc') : semver.inc(version, releaseType);
    return tasks.run({ nextVersion, isPrerelease });
}
