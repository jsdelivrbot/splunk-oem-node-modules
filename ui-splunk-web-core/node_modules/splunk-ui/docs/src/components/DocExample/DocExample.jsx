import React, { Component, PropTypes } from 'react';
import { _ } from 'splunk-ui/util/i18n';
import { createTestHook } from 'splunk-ui/util/testSupport';
import Box from 'splunk-ui/components/Box';
import Button from 'splunk-ui/components/Button';
import Card from 'components/Card';
import Code from 'splunk-ui/components/Code';
import TransitionOpen from 'splunk-ui/components/TransitionOpen';
import Heading from 'splunk-ui/components/Heading';
import CodeIcon from 'splunk-ui/icons/Code';
import css from './DocExample.css';

class DocExample extends Component {
    static propTypes = {
        code: PropTypes.string,
        title: PropTypes.string,
        description: PropTypes.string,
        example: PropTypes.func,
        children: PropTypes.node,
    };

    constructor(props, context) {
        super(props, context);
        this.state = {
            showCode: false,
        };
    }

    toggleShowCode = () => {
        this.setState({
            showCode: !this.state.showCode,
        });
    }

    render() {
        const { children, example, code, title, description } = this.props;

        const Example = example;

        return (
            <Card {...createTestHook(__filename, title)}>
                <Box
                    data-component-name="head"
                    className={css.head}
                    flex
                >
                    {title && <Heading level={3}>{title}</Heading>}
                    {code && (
                        <Button
                            appearance="pill"
                            onClick={this.toggleShowCode}
                            icon={<CodeIcon size={1.2} />}
                            label={this.state.showCode ? _('Hide Code') : _('Show Code')}
                            style={{ flex: '0 0 auto' }}
                        />
                    )}
                </Box>
                {code && (
                    <TransitionOpen open={this.state.showCode}>
                        <Box className={css.code} data-component-name="code">
                            <Code
                                language="javascript"
                                value={code.replace(/\n$/, '')}
                            />
                        </Box>
                    </TransitionOpen>
                )}
                <Box className={css.example} data-component-name="example">
                    {(description || children) && (
                        <div className={css.description}>{description}{children}</div>
                    )}
                    { Example && <Example />}
                </Box>
            </Card>
        );
    }
}

export default DocExample;
