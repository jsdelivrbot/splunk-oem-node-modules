import React, { PropTypes } from 'react';
import { map, reduce } from 'lodash';
import { createTestHook } from 'splunk-ui/util/testSupport';
import Heading from 'splunk-ui/components/Heading';
import Markdown from 'splunk-ui/components/Markdown';
import css from './Specs.css';

const propTypes = {
    docs: PropTypes.object.isRequired,
    title: PropTypes.string,
};


function Value(props) {
    const value = props.value; // eslint-disable-line react/prop-types

    return (
        <span>
            {
                (value === true && 'true') ||
                (value === false && 'false') ||
                (typeof value === 'undefined' && '') ||
                (typeof value === 'number' && value) ||
                (typeof value === 'string' && value) ||
                (typeof value === 'function' && 'function') ||
                (typeof value === 'object' && JSON.stringify(value))
            }
        </span>
    );
}

function Type(props) {
    const type = props.type; // eslint-disable-line react/prop-types
    const name = type && type.name;

    return (
        <span>
            {
                (name === 'shape' && JSON.stringify(type.value)) ||
                (name === 'enum' && type.value.map(v => v.value).join(', ')) ||
                (name === 'union' && type.value.map(v => v.name).join(', ')) ||
                (name && name)
            }
        </span>
    );
}

export default function Specs(props) {
    function generateParam(param, index) {
        return (
            <tr className={css.tr} key={index}>
                <th className={css.thParam}>{param.name}:{param.type && param.type.name}</th>
                <td className={css.td}>{param.description}</td>
            </tr>
        );
    }

    function generateSyntax(param, index) {
        const sep = index ? ', ' : '';

        return param.optional ? `${sep}[${param.name}]` : `${sep}${param.name}`;
    }

    function generateMethodRow(result, item, index) {
        if (item.description) {
            result.push(
                <div
                    key={index}
                    className={css.method}
                    {...createTestHook(__filename, props.title)}
                >
                    <div className={css.methodName}>{item.name}
                        ({map(item.params, generateSyntax)})
                    </div>
                    <div className={css.specs}>
                        <Markdown className={css.description} text={item.description} />
                        <table className={css.table}>
                            <tbody className={css.tbody}>
                                {map(item.params, generateParam)}
                                {item.returns && item.returns.description && (
                                    <tr className={css.tr}>
                                        <th className={css.th}>Returns:</th>
                                        <td className={css.td}>{item.returns.description}</td>
                                    </tr>
                                )}
                            </tbody>
                        </table>
                    </div>
                </div>
            );
        }
        return result;
    }

    function generatePropRow(result, item, key) {
        if (!/@docs-ignore/.test(item.description)) {
            result.push(
                <div key={key} className={css.prop} {...createTestHook(__filename, props.title)}>
                    <div className={css.propName}>{key}</div>
                    <div className={css.specs}>
                        {
                            item.description &&
                            <Markdown className={css.description} text={item.description} />
                        }
                        <table className={css.table}>
                            <tbody className={css.tbody}>
                                {item.type && (
                                    <tr className={css.tr}>
                                        <th className={css.th}>Type:</th>
                                        <td className={css.td}><Type type={item.type} /></td>
                                    </tr>
                                )}
                                {item.defaultValue && item.defaultValue.value
                                    && item.type.name !== 'func' && (
                                    <tr className={css.tr}>
                                        <th className={css.th}>Default:</th>
                                        <td className={css.td}>
                                            <Value
                                                value={item.defaultValue && item.defaultValue.value}
                                            />
                                        </td>
                                    </tr>
                                )}
                                <tr className={css.tr}>
                                    <th className={css.th}>Required:</th>
                                    <td className={css.td}>{item.required ? 'yes' : 'no'}</td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
            );
        }
        return result;
    }

    const methodRows = [];
    if (props.docs.methods) {
        reduce(props.docs.methods, generateMethodRow, methodRows);
    }

    const propRows = [];
    if (props.docs.props) {
        reduce(props.docs.props, generatePropRow, propRows);
    }

    return (
        <div>
            {methodRows.length > 0 && (
                <div className={css.main}>
                    <Heading level={3}>{props.title} Methods</Heading>
                    { methodRows }
                </div>
            )}
            {propRows.length > 0 && (
                <div className={css.main}>
                    <Heading level={3}>{props.title} Properties</Heading>
                    { propRows }
                </div>
            )}
        </div>
    );
}
Specs.propTypes = propTypes;
