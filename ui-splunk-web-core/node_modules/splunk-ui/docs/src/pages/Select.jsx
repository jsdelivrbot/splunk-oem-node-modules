import React from 'react';
import DocExample from 'components/DocExample';
import DocPage from 'components/DocPage';
import Specs from 'components/Specs';
import packageData from 'splunk-ui/components/Select/package.json';
import docs from '!!docgen-loader!splunk-ui/components/Select';
import docsOption from '!!docgen-loader!splunk-ui/components/Select/Option';

const examples = require.context('splunk-ui/components/Select/examples/');
const examplesRaw = require.context('!!raw!splunk-ui/components/Select/examples/');

function Select() {
    return (
        <DocPage {...packageData} description={docs[0].description}>
            <DocExample
                title="Basic"
                description={`Select requires a value prop and an onChange
                    callback to update the value prop for most use cases.`}
                code={examplesRaw('./Basic')}
                example={examples('./Basic').default}
            />
            <DocExample
                title="Uncontrolled"
                description={`Alternately, Select can be uncontrolled and optionally provided a
                    defaultValue. The onChange callback still fires. The value prop cannot be
                    set or updated externally.`}
                code={examplesRaw('./Uncontrolled')}
                example={examples('./Uncontrolled').default}
            />
            <DocExample
                title="Icons"
                description="Icons can be added."
                code={examplesRaw('./Icons')}
                example={examples('./Icons').default}
            />
            <DocExample
                title="Prefixed Label"
                description="When used outside of a ControlGroup, it is useful to\
                    inline the label inside the button."
                code={examplesRaw('./Prefix')}
                example={examples('./Prefix').default}
            />
            <DocExample
                title="Appearance"
                description="The appearance property changes the toggle to any button appearance."
                code={examplesRaw('./Appearance')}
                example={examples('./Appearance').default}
            />
            <DocExample
                title="Descriptions"
                description="Descriptions can be placed below or to the right of the label."
                code={examplesRaw('./Descriptions')}
                example={examples('./Descriptions').default}
            />
            <DocExample
                title="Icons"
                description="Icons are placed before the label."
                code={examplesRaw('./Icons')}
                example={examples('./Icons').default}
            />
            <DocExample
                title="Complex"
                code={examplesRaw('./Complex')}
                example={examples('./Complex').default}
            />
            <DocExample
                title="Error"
                description="Select menus can have an error state."
                code={examplesRaw('./Error')}
                example={examples('./Error').default}
            />
            <DocExample
                title="Truncate"
                description="Labels that are too long can be restrained to one line and trunctated."
                code={examplesRaw('./Truncate')}
                example={examples('./Truncate').default}
            />
            <DocExample
                title="Filter Select Items"
                description="An additional filter box can be enabled"
                code={examplesRaw('./Filter')}
                example={examples('./Filter').default}
            />
            <DocExample
                title="Fetching"
                code={examplesRaw('./Fetching')}
                example={examples('./Fetching').default}
            >
                It's possible to populate the Options from a server. Here, that behavior is
                simulated.
            </DocExample>
            <Specs
                docs={docs[0]}
                title="Select"
            />
            <Specs
                docs={docsOption[0]}
                title="Select.Option"
            />
        </DocPage>
    );
}

export default Select;
