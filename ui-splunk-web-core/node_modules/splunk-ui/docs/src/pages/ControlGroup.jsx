import React from 'react';
import DocExample from 'components/DocExample';
import DocPage from 'components/DocPage';
import Specs from 'components/Specs';
import packageData from 'splunk-ui/components/ControlGroup/package.json';
import docs from '!!docgen-loader!splunk-ui/components/ControlGroup';
import docsHelp from '!!docgen-loader!splunk-ui/components/ControlGroup/Help';

const examples = require.context('splunk-ui/components/ControlGroup/examples/');
const examplesRaw = require.context('!!raw!splunk-ui/components/ControlGroup/examples/');

export default function ControlGroups() {
    return (
        <DocPage {...packageData}>
            <DocExample
                title="Default Appearance"
                code={examplesRaw('./Basic')}
                example={examples('./Basic').default}
            >
                By default, the label appears to the left and the control fills the space.
            </DocExample>
            <DocExample
                title="Labels on Top"
                code={examplesRaw('./LabelTop')}
                example={examples('./LabelTop').default}
            >
                Alternately, labels can be placed above the control.
            </DocExample>
            <DocExample
                title="Help text containing links or HTML"
                code={examplesRaw('./HelpWithLinks')}
                example={examples('./HelpWithLinks').default}
            >
                Help text can also contain html by manually instantiating a
                ControlGroup.Help component.
            </DocExample>
            <DocExample
                title="Error"
                code={examplesRaw('./Error')}
                example={examples('./Error').default}
            >
                The error property will turn the label red, but it does not affect the children.
                Most form controls have their own error property.
            </DocExample>
            <DocExample
                title="Fill Layout (Default)"
                code={examplesRaw('./LayoutFill')}
                example={examples('./LayoutFill').default}
            >
                Fill layout will put space between the controls.
            </DocExample>
            <DocExample
                title="Fill and Join Layout"
                code={examplesRaw('./LayoutFillJoin')}
                example={examples('./LayoutFillJoin').default}
            >
                The controls will fill the space and will be joined together.
            </DocExample>
            <DocExample
                title="No Layout"
                code={examplesRaw('./LayoutNone')}
                example={examples('./LayoutNone').default}
            >
                Removing the layout will allow controls to control their own size and
                wrap onto multiple lines.
            </DocExample>
            <DocExample
                title="Small"
                code={examplesRaw('./Small')}
                example={examples('./Small').default}
            >
                For highly complex tools, small controls may be appropriate.
            </DocExample>
            <Specs docs={docs[0]} title="ControlGroup" />
            <Specs docs={docsHelp[0]} title="ControlGroup.Help" />
        </DocPage>
    );
}
