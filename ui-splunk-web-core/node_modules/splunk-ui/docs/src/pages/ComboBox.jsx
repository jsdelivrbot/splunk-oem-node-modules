import React from 'react';
import DocExample from 'components/DocExample';
import DocPage from 'components/DocPage';
import Specs from 'components/Specs';
import packageData from 'splunk-ui/components/ComboBox/package.json';
import docs from '!!docgen-loader!splunk-ui/components/ComboBox';
import optionDocs from '!!docgen-loader!splunk-ui/components/ComboBox/Option';

const examples = require.context('splunk-ui/components/ComboBox/examples/');
const examplesRaw = require.context('!!raw!splunk-ui/components/ComboBox/examples/');

function ComboBox() {
    return (
        <DocPage {...packageData} description={docs[0].description}>
            <DocExample
                title="Uncontrolled"
                code={examplesRaw('./Uncontrolled')}
                example={examples('./Uncontrolled').default}
            >
            This is a basic example in which data management and filtering are
            handled internally
            </DocExample>
            <DocExample
                title="Controlled Value"
                code={examplesRaw('./Controlled')}
                example={examples('./Controlled').default}
            >
            Typically, the value is controlled.
            </DocExample>
            <DocExample
                title="Controlled Filter"
                code={examplesRaw('./ControlledFilter')}
                example={examples('./ControlledFilter').default}
            >
            When the `controlledFilter` option is provided, the `ComboBox` will
            not filter the children. The parent should handle filtering and provide only
            the relavant children. This makes it possible to populate the children
            asynchronously from a server based on the input value when the number of
            possible values is very large.
            </DocExample>
            <DocExample
                title="Fetching"
                code={examplesRaw('./Fetching')}
                example={examples('./Fetching').default}
            >
                It's possible to populate the Options from a server. Here, that behavior is
                simulated.
            </DocExample>
            <Specs docs={docs[0]} title="ComboBox" />
            <Specs docs={optionDocs[0]} title="ComboBox.Option" />
        </DocPage>
    );
}

export default ComboBox;
