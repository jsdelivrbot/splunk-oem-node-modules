module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.warning = warning;
	exports.invariant = invariant;
	/* eslint-disable no-console */
	/**
	 * The objective of this utility is to funnel all error handling through a single module. This will
	 * enable us to do a variety of things with errors, like manipulate the messages, or log them
	 * somewhere.
	 *
	 * Currently this module only cleans up the error messages by removing excess whitespace and
	 * thereby enabling multi-line strings in error messages to be displayed correctly in the console.
	 */
	
	function cleanMessage(message) {
	    return message.replace(/\s+/g, ' ');
	}
	
	/**
	 * Warnings do not block the execution of code. Use to provide developer feedback on best practices.
	 */
	function warning(message) {
	    if (console && console.error) {
	        console.error(cleanMessage(message));
	    } else {
	        try {
	            throw new Error(cleanMessage(message));
	        } catch (e) {} // eslint-disable-line no-empty
	    }
	}
	
	/**
	 * Invariant blocks execution of the code. Use when something has truly gone wrong, and the code
	 * path needs to be stopped immediately and completely.
	 */
	function invariant(message) {
	    throw new Error(cleanMessage(message));
	}

/***/ }
/******/ ]);
//# sourceMappingURL=errorHandling.js.map