{"version":3,"sources":["webpack:///webpack/bootstrap e6bb1ea7630797156c25?3f0f**********************************************************************************************************************************************************************************************","webpack:///./src/util/filter/filter.js","webpack:///external \"lodash\"?0c8b*************************************"],"names":["splitToWords","string","regex","words","match","exec","push","splitWordToAdjacentCharset","word","result","i","length","charAt","splitToAdjacentCharset","array","commonElementsOf","inputSet","targetSet","input","every","targetElem","inputElem","inputIdx","undefined","filterByKeywords","items","keywords","valueGetter","item","value","map","replace","toLowerCase","filter","text","matchCount","index","inputStr","stringsToMatch","options","results","str","caseSensitive","toUpperCase","rankResult","rank","highlightIndexes","commonWords","RegExp","search","start","emptyStr","Array","join","wordsRemain","indexOf","originString","targetStr","target","similiarity","getSimilarityOfStrings","inputWords","targetWords","lccwCount","getLongestContinuousCommonWords","continuous","maxWordCount","idx","idxInTarget","Math","max","inputCharset","targetCharset","commonCharset"],"mappings":"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","file":"util/filter.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap e6bb1ea7630797156c25","import { includes, some, map, each, flatten, sortBy, without } from 'lodash';\n\nfunction splitToWords(string) {\n    const regex = /[a-zA-Z0-9]+/g;\n    const words = [];\n    let match = regex.exec(string);\n    while (match != null) {\n        words.push(match[0]);\n        match = regex.exec(string);\n    }\n    return words;\n}\n\nfunction splitWordToAdjacentCharset(word) {\n    const result = [];\n    for (let i = 0; i < word.length - 1; ++i) {\n        result.push(word.charAt(i) + word.charAt(i + 1));\n    }\n    return result;\n}\n\nfunction splitToAdjacentCharset(string) {\n    let words = string;\n    if (typeof words === 'string') {\n        words = splitToWords(words);\n    }\n    const array = map(words, (word) => (splitWordToAdjacentCharset(word)));\n    return flatten(array);\n}\n\nfunction commonElementsOf(inputSet, targetSet) {\n    const result = [];\n    const input = inputSet;\n\n    targetSet.every((targetElem) => {\n        input.every((inputElem, inputIdx) => {\n            if (targetElem === inputElem) {\n                result.push(targetElem);\n                input[inputIdx] = undefined;\n            }\n            return targetElem !== inputElem;\n        });\n        return true;\n    });\n\n    return result;\n}\n\nexport default {\n    /**\n     *  a simple filter implementation that support multi keywords\n     * @param {Object[]} items - items to be filtered\n     * @param {string} keywords - filter keywords\n     * @param {function} valueGetter - a function that returns value from item,\n     * return undefined or null will keep the item in the result\n     * @returns {*}\n     */\n    filterByKeywords: (items, keywords = '', valueGetter = (item) => (item.value)) => {\n        // Split by spaces not in quotes, trim quote.\n        const words = (keywords.match(/(?:[^\\s\"]+|\"[^\"]*\")+/g) || []).map(word => (\n            word.replace(/^\"(.*)\"$/, '$1').toLowerCase()\n        ));\n\n        // If there are no words, just show everything.\n        if (words.length === 0) {\n            return items;\n        }\n        return items.filter((item) => {\n            const text = valueGetter(item);\n            let matchCount = 0;\n            if (text == null) {\n                return true;\n            }\n\n            some(words, (word, index) => {\n                if (matchCount < index) {\n                    return true;\n                }\n\n                if (includes(text.toLowerCase(), word)) {\n                    matchCount += 1;\n                }\n                return false;\n            });\n            return matchCount === words.length;\n        });\n    },\n\n    /**\n     * Main entry point for ranking a group of strings.\n     * @param {string} input:\n     * @param {string[]} stringsToMatch\n     *\n     * return an sorted array inluding ranking and highlighted text for each string.\n     * @returns {Object[]}\n     *\n     **/\n    match(inputStr, stringsToMatch, options) {\n        const results = [];\n        each(stringsToMatch, (str) => {\n            let string = str;\n            let input = inputStr;\n            if (!options || !options.caseSensitive) {\n                string = str.toUpperCase();\n                input = inputStr.toUpperCase();\n            }\n            const rankResult = this.rank(input, str, options);\n            if (rankResult.value > 1) {\n                rankResult.highlightIndexes = [];\n                each(rankResult.commonWords, (word) => {\n                    const regex = new RegExp(`\\\\b${word}\\\\b`);\n                    const index = string.search(regex);\n                    rankResult.highlightIndexes.push({\n                        start: index,\n                        length: word.length,\n                    });\n                    const emptyStr = (new Array(word.length + 1)).join(' ');\n                    string = string.replace(regex, emptyStr);\n                });\n                // get highlighted indexes of the non-common part.\n                const wordsRemain = without(splitToWords(input), ...rankResult.commonWords);\n                each(wordsRemain, (word) => {\n                    const index = string.indexOf(word);\n                    if (index >= 0) {\n                        rankResult.highlightIndexes.push({\n                            start: index,\n                            length: word.length,\n                        });\n                    }\n                });\n            } else if (string.indexOf(input) >= 0) {\n                rankResult.highlightIndexes = [{\n                    start: string.indexOf(input),\n                    length: input.length,\n                }];\n            }\n            rankResult.originString = str;\n            if (rankResult.value > 0.4 || rankResult.highlightIndexes != null) {\n                // Here's the threshold, if no word matches, we only return if similarity above 40%.\n                // reference: http://www.catalysoft.com/articles/StrikeAMatch.html\n                results.push(rankResult);\n            }\n        });\n        return sortBy(results, (result) => (-result.value));\n    },\n\n    rank(inputStr, targetStr, options) {\n        let input = inputStr;\n        let target = targetStr;\n        if (!options || !options.caseSensitive) {\n            input = input.toUpperCase();\n            target = target.toUpperCase();\n        }\n        const similiarity = this.getSimilarityOfStrings(input, target);\n\n        const inputWords = splitToWords(input);\n        const targetWords = splitToWords(target);\n\n        const commonWords = commonElementsOf(inputWords, targetWords);\n        const lccwCount = this.getLongestContinuousCommonWords(targetWords,\n            commonWords);\n        let rank = commonWords.length + similiarity;\n        if (lccwCount > 1) {\n            rank += lccwCount;\n        }\n        return {\n            value: rank,\n            commonWords,\n        };\n    },\n\n    getLongestContinuousCommonWords(targetWords, commonWords) {\n        let continuous = 0;\n        let maxWordCount = 0;\n        each(commonWords, (word, idx) => {\n            const idxInTarget = targetWords.indexOf(word);\n            continuous++;\n            if (idxInTarget + 1 >= targetWords.length\n                || commonWords[idx + 1] !== targetWords[idxInTarget + 1]) {\n                maxWordCount = Math.max(maxWordCount, continuous);\n                continuous = 0;\n            }\n        });\n        return maxWordCount;\n    },\n\n    getSimilarityOfStrings(input, target) {\n        const inputCharset = splitToAdjacentCharset(input);\n        const targetCharset = splitToAdjacentCharset(target);\n\n        const commonCharset = commonElementsOf(inputCharset, targetCharset);\n        return 2.0 * (commonCharset.length / (inputCharset.length\n            + targetCharset.length));\n    },\n\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/util/filter/filter.js","module.exports = require(\"lodash\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lodash\"\n// module id = 9\n// module chunks = 0 2 3 4 9 10 11 12 13 15 18 19 20 21 23 24 25 27 28 29 30 31 33 34 35 38 39 41 42 43 44 45 47 48 49 56 187 188 191"],"sourceRoot":""}