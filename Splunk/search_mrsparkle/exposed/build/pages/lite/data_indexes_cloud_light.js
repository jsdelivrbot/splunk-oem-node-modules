webpackJsonp([26],{0:function(module,exports,__webpack_require__){var __WEBPACK_AMD_DEFINE_ARRAY__,__WEBPACK_AMD_DEFINE_RESULT__;__webpack_require__.p=function(){function make_url(){for(var seg,len,output="",i=0,l=arguments.length;i<l;i++)seg=arguments[i].toString(),len=seg.length,len>1&&"/"==seg.charAt(len-1)&&(seg=seg.substring(0,len-1)),output+="/"!=seg.charAt(0)?"/"+seg:seg;if("/"!=output){var segments=output.split("/"),firstseg=segments[1];if("static"==firstseg||"modules"==firstseg){var postfix=output.substring(firstseg.length+2,output.length);output="/"+firstseg,window.$C.BUILD_NUMBER&&(output+="/@"+window.$C.BUILD_NUMBER),window.$C.BUILD_PUSH_NUMBER&&(output+="."+window.$C.BUILD_PUSH_NUMBER),"app"==segments[2]&&(output+=":"+getConfigValue("APP_BUILD",0)),output+="/"+postfix}}var root=getConfigValue("MRSPARKLE_ROOT_PATH","/"),djangoRoot=getConfigValue("DJANGO_ROOT_PATH",""),locale=getConfigValue("LOCALE","en-US"),combinedPath="";return combinedPath=djangoRoot&&output.substring(0,djangoRoot.length)===djangoRoot?output.replace(djangoRoot,djangoRoot+"/"+locale.toLowerCase()):"/"+locale+output,""==root||"/"==root?combinedPath:root+combinedPath}function getConfigValue(key,defaultValue){if(window.$C&&window.$C.hasOwnProperty(key))return window.$C[key];if(void 0!==defaultValue)return defaultValue;throw new Error("getConfigValue - "+key+" not set, no default provided")}return make_url("/static/build/pages/lite")+"/"}(),__WEBPACK_AMD_DEFINE_ARRAY__=[__webpack_require__("routers/IndexesCloudLight"),__webpack_require__("util/router_utils")],__WEBPACK_AMD_DEFINE_RESULT__=function(IndexesCloudLightRouter,router_utils){new IndexesCloudLightRouter;try{router_utils.start_backbone_history()}catch(e){window.location="./"}}.apply(exports,__WEBPACK_AMD_DEFINE_ARRAY__),!(void 0!==__WEBPACK_AMD_DEFINE_RESULT__&&(module.exports=__WEBPACK_AMD_DEFINE_RESULT__))},"routers/IndexesCloudLight":function(module,exports,__webpack_require__){var __WEBPACK_AMD_DEFINE_ARRAY__,__WEBPACK_AMD_DEFINE_RESULT__;__WEBPACK_AMD_DEFINE_ARRAY__=[__webpack_require__("require/underscore"),__webpack_require__("routers/IndexesBase"),__webpack_require__("models/services/data/Indexes"),__webpack_require__("collections/services/data/Indexes"),__webpack_require__("models/indexes/shared/NoInternalIndexFetchData"),__webpack_require__("views/indexes/cloud/AddEditIndexDialog"),__webpack_require__("views/indexes/shared/PageController"),__webpack_require__(1037)],__WEBPACK_AMD_DEFINE_RESULT__=function(_,IndexesRouter,IndexModel,IndexesCollection,IndexFetchData,AddEditIndexDialog,IndexesController,IndexesGridRowTemplate){return IndexesRouter.extend({createController:function(model,collection){return new IndexesController({model:model||this.model,router:this,isCloud:!0,isCloudLight:!0,indexModelClass:IndexModel,collection:collection||this.collection,archivesCollectionClass:void 0,indexesCollectionClass:IndexesCollection,indexesFetchDataClass:IndexFetchData,addEditDialogClass:AddEditIndexDialog,templates:{gridRow:IndexesGridRowTemplate}})}})}.apply(exports,__WEBPACK_AMD_DEFINE_ARRAY__),!(void 0!==__WEBPACK_AMD_DEFINE_RESULT__&&(module.exports=__WEBPACK_AMD_DEFINE_RESULT__))},"models/indexes/shared/NoInternalIndexFetchData":function(module,exports,__webpack_require__){var __WEBPACK_AMD_DEFINE_ARRAY__,__WEBPACK_AMD_DEFINE_RESULT__;__WEBPACK_AMD_DEFINE_ARRAY__=[__webpack_require__("require/underscore"),__webpack_require__("models/shared/EAIFilterFetchData")],__WEBPACK_AMD_DEFINE_RESULT__=function(_,EAIFilterFetchData){return EAIFilterFetchData.extend({getCalculatedSearch:function(){var searchString=EAIFilterFetchData.prototype.getCalculatedSearch.apply(this,arguments);return""==searchString?searchString="isVirtual=0":""!=searchString&&(searchString+=" AND isVirtual=0"),searchString+=" AND isInternal=0"}})}.apply(exports,__WEBPACK_AMD_DEFINE_ARRAY__),!(void 0!==__WEBPACK_AMD_DEFINE_RESULT__&&(module.exports=__WEBPACK_AMD_DEFINE_RESULT__))},1037:function(module,exports){module.exports='<td class="index-name">\n    <% if (model.entity.entry.links.get("edit")) { %>\n    <a href=<%- editLink %> class="editAction"><%- model.entity.entry.get("name") %></a>\n    <% } else { %>\n    <span class="disabled-action"><%- model.entity.entry.get("name") %></span>\n    <% } %>\n</td>\n<td class="actions">\n    <% if (model.entity.entry.links.get("edit")) { %>\n    <a href=<%- editLink %> class="editAction"><%= _("Edit").t() %></a>\n    <% } else { %>\n    <span class="disabled-action"><%= _("Edit").t() %></span>\n    <% } %>\n    <% if (isInternal) { %>\n    <span class="disabled-action"><%= _("Delete").t() %></span>\n    <% if (isEnabled) { %>\n    <span class="disabled-action"><%= _("Disable").t() %></span>\n    <% } else { %>\n    <span class="disabled-action"><%= _("Enable").t() %></span>\n    <% } %>\n    <% } else { %>\n    <% if (isEnabled) { %>\n    <a href="#" class="deleteAction"><%= _("Delete").t() %></a>\n    <a href="#" class="disableAction"><%= _("Disable").t() %></a>\n    <% } else { %>\n    <span class="disabled-action"><%= _("Delete").t() %></span>\n    <a href="#" class="enableAction"><%= _("Enable").t() %></a>\n    <% } %>\n    <% } %>\n</td>\n<td class="index-type">\n    <i class="icon-<%-model.entity.getDataType()%> icon-large"></i>\n    <%- formatDataType(model.entity.getDataType()) %>\n</td>\n<% if (user.canUseApps()) { %>\n<td class="index-app"><%- model.entity.entry.content.get("eai:acl.appDisplayName") %></td>\n<% } %>\n<td class="current-size"><%- formatNumbersUtils.bytesToFileSize(model.entity.entry.content.get("currentDBSizeMB") * 1024 * 1024) %></td> <!-- format w/ size units -->\n<td class="max-size"><%- formatNumbersUtils.bytesToFileSize(model.entity.entry.content.get("maxTotalDataSizeMB") * 1024 * 1024) %></td> <!-- format in GB -->\n<td class="event-count" title="<%- splunkUtil.sprintf(_(\'%s events\').t(), model.entity.entry.content.get("totalEventCount")) %>"><%- formatNumbersUtils.abbreviateNumber(model.entity.entry.content.get("totalEventCount")) %></td> <!-- Abbreviate number -->\n<td class="earliest-event" title="<%- formatToLocalTime(model.entity.entry.content.get("minTime")) %>"><%- formatToRelativeTime(model.entity.entry.content.get("minTime")) %></td> <!-- format into relative time -->\n<td class="latest-event" title="<%- formatToLocalTime(model.entity.entry.content.get("maxTime")) %>"><%- formatToRelativeTime(model.entity.entry.content.get("maxTime")) %></td><!-- format into relative time -->\n<td class="retention">\n    <% var frozenTimePeriodInSecs = model.entity.entry.content.get("frozenTimePeriodInSecs");\n        var frozenTimePeriodInSecsDisplay = frozenTimePeriodInSecs === 0 ? _("keep indefinitely").t() : timeUtils.getRelativeStringFromSeconds(frozenTimePeriodInSecs);\n    %>\n    <%- frozenTimePeriodInSecsDisplay %></td> <!-- format into relative time -->\n\n<% if (user.canViewArchives()) { %>\n    <td class="archive"><%- model.entity.entry.content.get("archive.provider") %></td>\n<% } %>\n\n<td class="index-status">\n    <div class="status-cell-placeholder"></div>\n</td>\n'}});