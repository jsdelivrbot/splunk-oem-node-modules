[module]
# The JavaScript name of the module
className = Splunk.Module.FlashChart

# The module class to subclass from
superClass = Splunk.Module.FlashWrapper

description = This module contains a Flash object that is capable of charting almost any search results that the Splunk backend can generate.

[param:swfFile]
required = False
label =  This is the path, relative to $SPLUNK_HOME/share/splunk/search_mrsparkle/exposed/flash,  that specifies the swf to load.  The swf must conform to a very strict and thus-far undocumented spec that is not for external consumption. 
Default = charting.swf

[param:width]
required = False
label = This specifies the width of the module. It can be a percentage or a number of pixels. Typically this is set to "100%" meaning it should fill all available space.  It can also be set to a number of pixels by using a value like "500px".
default = 100%

[param:height]
required = False
label = This specifies the height of the module. It can be a percentage or a number of pixels.
default = 210px
sticky = true
persistable = true

[param:maxRowsForTop]
required=False
label = This specifies how many rows of the data should be rendered for 'top' and 'rare' results.  This value overrides maxResultCount when rendering results from the special-cased results.

[param:maxResultCount]
required = False
default = 1000
label = This specifies the maximum number of results to render per series.  For a single-series chart, this creates up to <maxResultCount> data points; for a multi-series chart with m series, this creates up to (m * <maxResultCount>) data points.  In general, the practical limit should be set to the number of horizontal pixels available to the chart.  For example, setting this to a value like 5000, when the available space for the chart on an average screen is around 500 pixels, will have an adverse performance effect on the UI with no visible difference in the chart.


[param:drilldownPrefix]
required = False
default = click
label = Not required.  Since this defaults to 'click', by default the keys will come down in the context as 'click.name',  'click.value',  'click.name2',  'click.value2'.   In cases where you are nesting multiple drilldown patterns in the same view, this key is used so that the second set of keys does not collide with the first.  For example if you have a nested config you might set the first to "userClick", and the second to "applicationClick".    
